<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>推荐一款 STM32 的 vscode 插件，stm32-for-vscode</title>
    <link href="/2020/12/29/stm32-for-vscode/"/>
    <url>/2020/12/29/stm32-for-vscode/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/bmd-studio/stm32-for-vscode">stm32-for-vscode</a> 是一款用于使用 <code>vscode</code> 来开发 <code>stm32</code> 项目的插件，这款插件是 2019 首次发布的，属于比较新的插件了，通过测试可以使用。</p><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>该插件可以实现快速的 <span class="label label-primary">编译</span> <span class="label label-primary">下载</span> <span class="label label-primary">调试</span> STM32 项目，先决条件是：</p><ol><li><a href="https://github.com/Marus/cortex-debug">Cortex-Debug</a>，安装这个 vscode 扩展和基础的C/C++插件</li><li><a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads">GNU Arm Embedded Toolchain</a>，安装该软件，并配置好环境变量</li><li><a href="http://gnuwin32.sourceforge.net/packages/make.htm">Make</a> ，电脑上要有 make.exe，并且配好环境变量</li><li><a href="https://gnutoolchains.com/arm-eabi/openocd/">OpenOCD</a>，安装 OpenOCD，并配置环境变量</li></ol><p>以上4条是先决条件，接下来使用 <code>ST</code>官方提供的 <code>STM32CubeMX</code> 来创建一个项目，在项目配置 <code>Toolchain / IDE</code> 处选择 <code>Makefile</code>。</p><p>创建完成项目后，用<code>vscode</code>打开，执行 <code>ctrl+shift+p</code> 打开命令面板，在面板中输入 “stm32”后会出现三个命令，分别为：<br><img src="/img/stm32-for-vscode.png" alt="stm32 for vscode"></p><p>第一次执行编译命令后，会在项目中生成 <code>.vscode</code> 文件夹，文件夹中包含一下几个文件:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">c_cpp_properties</span><span class="hljs-selector-class">.json</span><br><span class="hljs-selector-tag">launch</span><span class="hljs-selector-class">.json</span><br><span class="hljs-selector-tag">settings</span><span class="hljs-selector-class">.json</span><br><span class="hljs-selector-tag">tasks</span><span class="hljs-selector-class">.json</span><br></code></pre></div></td></tr></table></figure><p>这几个文件就是 <code>stm32-for-vscode</code> 这几个插件生成的，默认也是配置好的，可以不用修改直接使用。</p><h2 id="给任务添加快捷键"><a href="#给任务添加快捷键" class="headerlink" title="给任务添加快捷键"></a>给任务添加快捷键</h2><p><code>ctrl+1</code> : 编译<br><code>ctrl+2</code> : 下载<br><code>ctrl+3</code> : Clean 与 编译</p><p>keybindings.json</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">[<br>    &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;ctrl+1&quot;</span>,<br>        <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;workbench.action.tasks.runTask&quot;</span>,<br>        <span class="hljs-attr">&quot;args&quot;</span>: <span class="hljs-string">&quot;Build STM&quot;</span>,<br>        <span class="hljs-attr">&quot;when&quot;</span>: <span class="hljs-string">&quot;editorTextFocus&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;ctrl+2&quot;</span>,<br>        <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;workbench.action.tasks.runTask&quot;</span>,<br>        <span class="hljs-attr">&quot;args&quot;</span>: <span class="hljs-string">&quot;Flash STM&quot;</span>,<br>        <span class="hljs-attr">&quot;when&quot;</span>: <span class="hljs-string">&quot;editorTextFocus&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;ctrl+3&quot;</span>,<br>        <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;workbench.action.tasks.runTask&quot;</span>,<br>        <span class="hljs-attr">&quot;args&quot;</span>: <span class="hljs-string">&quot;Build Clean STM&quot;</span>,<br>        <span class="hljs-attr">&quot;when&quot;</span>: <span class="hljs-string">&quot;editorTextFocus&quot;</span><br>    &#125;<br>]<br></code></pre></div></td></tr></table></figure><ul><li><strong>key</strong> 表示绑定的键。</li><li><strong>command</strong> 表示执行的命令。</li><li><strong>args</strong> 命令的参数，这里我们是build编译任务</li><li><strong>when</strong> 快捷键在何时生效，这里指的是编辑区</li></ul>]]></content>
    
    
    <categories>
      
      <category>电子技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>vscode</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MSYS2 命令笔记</title>
    <link href="/2020/12/29/msys2-command/"/>
    <url>/2020/12/29/msys2-command/</url>
    
    <content type="html"><![CDATA[<p>首先说说什么是 <code>MSYS2</code> ？</p><p><code>MSYS2 （Minimal SYStem 2)</code> 是一个<code>MSYS</code>的独立改写版本，主要用于 <code>shell</code> 命令行开发环境。同时它也是一个在<code>Cygwin</code> （<code>POSIX</code> 兼容性层） 和 <code>MinGW-w64</code>（从”<code>MinGW</code>-生成”）基础上产生的，追求更好的互操作性的 <code>Windows</code> 软件。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pacman -Sy 更新软件包数据<br>pacman -R package-name 删除软件包<br>pacman -S package-name 安装软件包<br>pacman -Syu 更新所有<br>pacman -Ss xx 查询软件xx的信息<br></code></pre></div></td></tr></table></figure><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>安装软件通过 <code>pacman -S package-name</code> 来安装。</p><p>如果不知道具体的软件名或要安装的版本信息，则可以先通过 <code>pacman -Ss xx 查询软件xx的信息</code>命令，来先查一下软件的具体信息；因为有些软件包含很多的版本,所以通过该命令来找到具体的软件包名称后，通过复制软件名再通过 <code>pacman -S</code> 来安装。</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://www.msys2.org/">https://www.msys2.org/</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MSYS2</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 VSCode 开发 STM32 项目</title>
    <link href="/2020/12/29/stm32-vscode-dev/"/>
    <url>/2020/12/29/stm32-vscode-dev/</url>
    
    <content type="html"><![CDATA[<p>vscode 是一款最好用的开发工具之一，该软件非常好用强大，通过安装插件几乎可以完成所有的开发工作。</p><p>用 vscode 开发 stm32 的步骤是：</p><ol><li>用<code>STM32CubeMX</code> 生成 <code>stm32</code> 项目，注意要生成 <code>Makefile</code> 项目</li><li>使用 stm32-for-vscode 插件来 <span class="label label-primary">编译</span> <span class="label label-primary">调试</span> <span class="label label-primary">下载</span> 代码。</li><li>添加自己的 <code>c</code> 源文件和头文件，并把这些文件的路径添加到 <code>Makefile</code> 中</li></ol><p>所以要维护的也就是 <code>Makefile</code> 文件。</p><h2 id="添加-u-printf-float-u-sprintf-float"><a href="#添加-u-printf-float-u-sprintf-float" class="headerlink" title="添加 -u_printf_float -u_sprintf_float"></a>添加 -u_printf_float -u_sprintf_float</h2><p>添加串口打印浮点数的功能</p><p>在 Makefile 中这行代码前添加</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile">LDFLAGS = <span class="hljs-variable">$(MCU)</span> -u_printf_float -u_sprintf_float -specs=nano.specs -T<span class="hljs-variable">$(LDSCRIPT)</span> <span class="hljs-variable">$(LIBDIR)</span> <span class="hljs-variable">$(LIBS)</span> -Wl,-Map=<span class="hljs-variable">$(BUILD_DIR)</span>/<span class="hljs-variable">$(TARGET)</span>.map,--cref -Wl,--gc-sections<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>电子技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 配置笔记</title>
    <link href="/2020/12/28/Hexo-%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/12/28/Hexo-%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇介绍 <code>hexo</code> 配置的文章。</p><h2 id="选择一款主题"><a href="#选择一款主题" class="headerlink" title="选择一款主题"></a>选择一款主题</h2><p>在我有意的搜索中，发现了这款漂亮的主题 <code>fluid</code>，这是一款 <code>Material Design</code> 风格的主题，通过测试发现这款主题还是比较完美的。</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src="/img/fluid.png" alt="fluid"></p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><ul><li><a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></li></ul><p>该主题对中文用户非常友好，配置中的注释都是中文的，所有功能开箱即用。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>快速开始使用 Hexo 写文章并且发布到 <code>Github Page</code> 上，前提是还要安装个插件：</p><p><code>$ npm install hexo-deployer-git --save</code></p><p>这里贴上配置代码：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&#x27;https://github.com/FY2008/fy2008.github.io.git&#x27;</span> <span class="hljs-comment"># https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">&#x27;main&#x27;</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;站点更新: <span class="hljs-template-variable">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h2><h3 id="init-初始化"><a href="#init-初始化" class="headerlink" title="init 初始化"></a>init 初始化</h3><p><code>$ hexo init [folder]</code></p><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h3 id="new-新建命令"><a href="#new-新建命令" class="headerlink" title="new 新建命令"></a>new 新建命令</h3><p><code>$ hexo new [layout] &lt;title&gt;</code></p><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-p, –path</td><td align="left">自定义新文章的路径</td></tr><tr><td align="left">-r, –replace</td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left">-s, –slug</td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><p><code>hexo new page --path about/me &quot;About me&quot;</code></p><p>以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><p><code>hexo new page --path about/me</code></p><p><code>D:\dev\blog&gt;hexo new post -p stm32-for-vscode &quot;推荐一款 STM32 的 vscode 插件，stm32-for-vscode&quot;</code></p><p>这条命令是新建一个文章，并且指定路径名和文章标题名，路径名通过 <code>-p</code> 指定，文章标题名在最后面，并且用双引号括起来，以为文章标题包含空格。</p><h3 id="generate-生成命令（g）"><a href="#generate-生成命令（g）" class="headerlink" title="generate 生成命令（g）"></a>generate 生成命令（g）</h3><p><code>$ hexo generate</code><br>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-d, –deploy</td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left">-w, –watch</td><td align="left">监视文件变动</td></tr><tr><td align="left">-b, –bail</td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left">-f, –force</td><td align="left">强制重新生成文件Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</td></tr><tr><td align="left">-c, –concurrency</td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为:</p><p><code>$ hexo g</code></p><h3 id="建立文章草稿"><a href="#建立文章草稿" class="headerlink" title="建立文章草稿"></a>建立文章草稿</h3><p><code>$ hexo new draft &lt;title&gt;</code></p><p><code>Hexo</code> 另外提供 <code>draft</code> 机制，它的原理是新文章将建立在 <code>source/_drafts</code> 目录下，因此 <code>hexo generate</code> 并不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署到 <code>GitHub</code>。</p><h3 id="将草稿发布为正式文章"><a href="#将草稿发布为正式文章" class="headerlink" title="将草稿发布为正式文章"></a>将草稿发布为正式文章</h3><p><code>$ hexo publish [layout] &lt;filename&gt;</code><br><code>$ hexo P &lt;filename&gt;</code></p><p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称。它的原理只是将文章从 <code>source/_drafts</code> 移动到 <code>source/_posts</code> 而已。</p><h3 id="server-启动本地服务器"><a href="#server-启动本地服务器" class="headerlink" title="server 启动本地服务器"></a>server 启动本地服务器</h3><p><code>$ hexo server</code></p><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-p, –port</td><td align="left">重设端口</td></tr><tr><td align="left">-s, –static</td><td align="left">只使用静态文件</td></tr><tr><td align="left">-l, –log</td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><p>该命令可以简写为:</p><p><code>$ hexo s</code></p><h3 id="deploy-部署命令"><a href="#deploy-部署命令" class="headerlink" title="deploy 部署命令"></a>deploy 部署命令</h3><p><code>$ hexo deploy</code></p><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-g, –generate</td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><p><code>$ hexo d</code></p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p><code>$ hexo clean</code></p><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>$ hexo list &lt;type&gt;</code></p><p>list 命令参数</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">Argument<span class="hljs-variable">s:</span><br>  <span class="hljs-built_in">type</span>  Available <span class="hljs-built_in">type</span><span class="hljs-variable">s:</span> page, post, route, <span class="hljs-keyword">tag</span>, category<br></code></pre></div></td></tr></table></figure><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p><code>$ hexo version</code></p><p>显示 Hexo 版本。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><p><code>$ hexo --draft</code></p><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h2 id="Fluid-主题-tag-标签插件的颜色"><a href="#Fluid-主题-tag-标签插件的颜色" class="headerlink" title="Fluid 主题 tag 标签插件的颜色"></a>Fluid 主题 tag 标签插件的颜色</h2><figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><br><span class="xml">文字 或者 `markdown` 均可</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></div></td></tr></table></figure><p>或者使用 HTML 形式：</p><p><code>&lt;p class=&quot;note note-primary&quot;&gt;标签&lt;/p&gt;</code></p><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><h3 id="可选便签"><a href="#可选便签" class="headerlink" title="可选便签"></a>可选便签</h3><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div><div class="note note-warning">            <p><strong>WARNING</strong></p><p><code>使用时 &lt;div class=&quot;note note-primary&quot;&gt;             &lt;p&gt;和 &lt;/p&gt;           &lt;/div&gt; 需单独一行，否则会出现问题</code></p>          </div><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><p>在 <code>markdown</code> 中加入如下的代码来使用 <code>Label</code>：</p><p><code>&#123;% label primary @text %&#125;</code></p><p>或者使用 HTML 形式：</p><p><code>&lt;span class=&quot;label label-primary&quot;&gt;Label&lt;/span&gt;</code></p><span class="label label-primary">text</span><span class="label label-default">text</span><span class="label label-info">text</span><span class="label label-success">text</span><span class="label label-warning">text</span><span class="label label-danger">text</span><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><p>在 markdown 中加入如下的代码来使用 Checkbox：<br><code>&#123;% cb text, checked?, incline? %&#125;</code></p><p>text：显示的文字<br>checked：默认是否已勾选，默认 false<br>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</p>            <input type="checkbox" disabled checked="checked">text                      <input type="checkbox" disabled >text                      <input type="checkbox" disabled >text          <input type="checkbox" disabled > text<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>你可以在 markdown 中加入如下的代码来使用 Button：</p><p><code>&#123;% btn url, text, title %&#125;</code></p><p>或者使用 HTML 形式：</p><p><code>&lt;a class=&quot;btn&quot; href=&quot;url&quot; title=&quot;title&quot;&gt;text&lt;/a&gt;</code></p><a class="btn" href="https://www.github.com/fy2008"  title="Github" target="_blank">Github</a>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/28/hello-world/"/>
    <url>/2020/12/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
