<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Qt QML 颜色提取小程序</title>
    <link href="/2021/02/05/qml-color-picker/"/>
    <url>/2021/02/05/qml-color-picker/</url>
    
    <content type="html"><![CDATA[<p>这篇文章来分享一个有 <code>Qt Quick</code> 写的颜色提取小程序，实现的功能很简单，在窗口左下角放置几个不同颜色的矩形，每个矩形的颜色不同，在窗口顶部中间的位置放置一个文本 <code>Text</code> ，通过点击不同颜色的矩形来给文本设置不同的颜色。</p><p>该程序中用到的知识有 Qt Quick 中的 Component(组件)、自定义信号、connect等，具体看下方代码：</p><h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QGuiApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QQmlApplicationEngine&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);<br><br>    <span class="hljs-function">QGuiApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>    QQmlApplicationEngine engine;<br>    <span class="hljs-function"><span class="hljs-keyword">const</span> QUrl <span class="hljs-title">url</span><span class="hljs-params">(QStringLiteral(<span class="hljs-string">&quot;qrc:/main.qml&quot;</span>))</span></span>;<br>    QObject::connect(&amp;engine, &amp;QQmlApplicationEngine::objectCreated,<br>                     &amp;app, [url](QObject *obj, <span class="hljs-keyword">const</span> QUrl &amp;objUrl) &#123;<br>        <span class="hljs-keyword">if</span> (!obj &amp;&amp; url == objUrl)<br>            QCoreApplication::<span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;, Qt::QueuedConnection);<br>    engine.load(url);<br><br>    <span class="hljs-keyword">return</span> app.exec();<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ColorPicker-qml"><a href="#ColorPicker-qml" class="headerlink" title="ColorPicker.qml"></a>ColorPicker.qml</h2><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> QtQuick <span class="hljs-number">2.0</span><br><br><span class="hljs-title">Rectangle</span> &#123;<br>    <span class="hljs-attribute">id:</span><span class="hljs-string"> colorPicker</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">30</span><br>    <span class="hljs-keyword">signal</span><span class="hljs-string"> colorPicked</span>(<span class="hljs-built_in">color</span> clr)<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">configureBorder</span>(<span class="hljs-params"></span>)</span>&#123;<br>        colorPicker.border.width = colorPicker.focus ? <span class="hljs-number">2</span> : <span class="hljs-number">0</span><br>        colorPicker.border.color = colorPicker.focus ? <span class="hljs-string">&quot;#90D750&quot;</span> : <span class="hljs-string">&quot;#808080&quot;</span><br>    &#125;<br><br>    <span class="hljs-title">MouseArea</span> &#123;<br>        <span class="hljs-attribute">anchors.fill</span>: <span class="hljs-built_in">parent</span><br>        <span class="hljs-attribute">onClicked</span>: &#123;<br>            colorPicker.colorPicked(colorPicker.color)<br>            mouse.accepted = <span class="hljs-literal">true</span><br>            colorPicker.focus = <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-attribute">Keys.onReturnPressed</span>: &#123;<br>        colorPicker.colorPicked(colorPicker.color)<br>        event.accepted = <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-attribute">Keys.onSpacePressed</span>: &#123;<br>        colorPicker.colorPicked(colorPicker.color)<br>        event.accepted = <span class="hljs-literal">true</span><br>    &#125;<br><br>    <span class="hljs-attribute">onFocusChanged</span>: &#123;<br>        configureBorder()<br>    &#125;<br><br>    <span class="hljs-attribute">Component.onCompleted</span>: &#123;<br>        configureBorder()<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h2><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> QtQuick <span class="hljs-number">2.12</span><br><span class="hljs-keyword">import</span> QtQuick.Window <span class="hljs-number">2.12</span><br><br><span class="hljs-title">Window</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">640</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">480</span><br>    <span class="hljs-attribute">visible</span>: <span class="hljs-literal">true</span><br>    <span class="hljs-attribute">title</span>: qsTr(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><br>    <span class="hljs-title">Rectangle</span> &#123;<br>        <span class="hljs-attribute">anchors.fill</span>: <span class="hljs-built_in">parent</span><br><br>        <span class="hljs-title">Text</span> &#123;<br>            <span class="hljs-attribute">id:</span><span class="hljs-string"> coloredText</span><br>            <span class="hljs-attribute">text</span>: qsTr(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>            <span class="hljs-attribute">anchors.horizontalCenter</span>: <span class="hljs-built_in">parent</span>.horizontalCenter<br>            <span class="hljs-attribute">anchors.top</span>: <span class="hljs-built_in">parent</span>.top<br>            <span class="hljs-attribute">anchors.topMargin</span>: <span class="hljs-number">4</span><br>            <span class="hljs-attribute">font.pixelSize</span>: <span class="hljs-number">32</span><br>        &#125;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTextColor</span>(<span class="hljs-params">clr</span>)</span>&#123;<br>            coloredText.color = clr<br>        &#125;<br><br>        <span class="hljs-title">ColorPicker</span> &#123;<br>            <span class="hljs-attribute">id:</span><span class="hljs-string"> redColor</span><br>            <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;red&quot;</span><br>            <span class="hljs-attribute">focus</span>: <span class="hljs-literal">true</span><br>            <span class="hljs-attribute">anchors.bottom</span>: <span class="hljs-built_in">parent</span>.bottom<br>            <span class="hljs-attribute">anchors.bottomMargin</span>: <span class="hljs-number">4</span><br>            <span class="hljs-attribute">anchors.left</span>: <span class="hljs-built_in">parent</span>.left<br>            <span class="hljs-attribute">anchors.leftMargin</span>: <span class="hljs-number">4</span><br><br>            <span class="hljs-attribute">KeyNavigation.right</span>: blueColor<br>            <span class="hljs-attribute">KeyNavigation.tab</span>: blueColor<br>            <span class="hljs-attribute">onColorPicked</span>: &#123;<br>                coloredText.color = clr<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-title">ColorPicker</span> &#123;<br>            <span class="hljs-attribute">id:</span><span class="hljs-string"> blueColor</span><br>            <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;blue&quot;</span><br>            <span class="hljs-attribute">anchors.left</span>: redColor.right<br>            <span class="hljs-attribute">anchors.leftMargin</span>: <span class="hljs-number">4</span><br>            <span class="hljs-attribute">anchors.bottom</span>: <span class="hljs-built_in">parent</span>.bottom<br>            <span class="hljs-attribute">anchors.bottomMargin</span>: <span class="hljs-number">4</span><br><br>            <span class="hljs-attribute">KeyNavigation.left</span>: redColor<br>            <span class="hljs-attribute">KeyNavigation.right</span>: pinkColor<br>            <span class="hljs-attribute">KeyNavigation.tab</span>: pinkColor<br>        &#125;<br><br>        <span class="hljs-title">ColorPicker</span> &#123;<br>            <span class="hljs-attribute">id:</span><span class="hljs-string"> pinkColor</span><br>            <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;pink&quot;</span><br>            <span class="hljs-attribute">anchors.left</span>: blueColor.right<br>            <span class="hljs-attribute">anchors.leftMargin</span>: <span class="hljs-number">4</span><br>            <span class="hljs-attribute">anchors.bottom</span>: <span class="hljs-built_in">parent</span>.bottom<br>            <span class="hljs-attribute">anchors.bottomMargin</span>: <span class="hljs-number">4</span><br><br>            <span class="hljs-attribute">KeyNavigation.left</span>: blueColor<br>            <span class="hljs-attribute">KeyNavigation.right</span>: yellowColor<br>            <span class="hljs-attribute">KeyNavigation.tab</span>: yellowColor<br>        &#125;<br><br>        <span class="hljs-title">ColorPicker</span> &#123;<br>            <span class="hljs-attribute">id:</span><span class="hljs-string"> yellowColor</span><br>            <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;yellow&quot;</span><br>            <span class="hljs-attribute">anchors.left</span>: pinkColor.right<br>            <span class="hljs-attribute">anchors.leftMargin</span>: <span class="hljs-number">4</span><br>            <span class="hljs-attribute">anchors.bottom</span>: <span class="hljs-built_in">parent</span>.bottom<br>            <span class="hljs-attribute">anchors.bottomMargin</span>: <span class="hljs-number">4</span><br><br>            <span class="hljs-attribute">KeyNavigation.left</span>: pinkColor<br>            <span class="hljs-attribute">KeyNavigation.tab</span>: redColor<br>        &#125;<br><br><br><br>        <span class="hljs-attribute">Component.onCompleted</span>: &#123;<br>            blueColor.colorPicked.connect(setTextColor);<br>            pinkColor.colorPicked.connect(setTextColor);<br>            yellowColor.colorPicked.connect(setTextColor);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p><img src="/img/qt_colorPicker.gif" alt="colorPicker"></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>QML</tag>
      
      <tag>Color</tag>
      
      <tag>Component</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QML ECMAScript 基础</title>
    <link href="/2021/02/03/qml-ecmascript-base/"/>
    <url>/2021/02/03/qml-ecmascript-base/</url>
    
    <content type="html"><![CDATA[<p>测试<code>ECMAScript</code>的代码可发放在 Component.onCompleted: {}</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> QtQuick <span class="hljs-number">2.12</span><br><br><span class="hljs-title">Rectangle</span> &#123;<br>    <span class="hljs-attribute">Component.onCompleted</span>: &#123;<br>        <span class="hljs-comment">// 这里放测试代码</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>如果你熟悉 <code>C</code>、<code>C++</code>、或者<code>Java</code>，就会发现 <code>ECMAScript</code> 的语法很容易掌握。</p><h3 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h3><p>与<code>C++</code>一样，变量、函数名、运算符以及其他一切东西都是区分大小的。</p><h3 id="弱类型"><a href="#弱类型" class="headerlink" title="弱类型"></a>弱类型</h3><p>与<code>C++</code>不同，<code>ECMAScript</code> 中的变量没有特定的类型，定义变量时只用 <code>var</code> 运算符，可以将它初始化为任意的值，你可以随时改变变量所存储的数据类型。示例：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> background = <span class="hljs-string">&quot;white&quot;</span><br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span><br><span class="hljs-keyword">var</span> children = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>()<br><span class="hljs-keyword">var</span> focus = <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><h3 id="语句后的分号可有可无"><a href="#语句后的分号可有可无" class="headerlink" title="语句后的分号可有可无"></a>语句后的分号可有可无</h3><p>C、C++、Java等语言都要求每条语句以分号（;）结束。ECMAScript 则允许开发者自行决定是否以分号结束一行代码。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>ECMAScript 借用了 C、Java等语言的注释语法。</p><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>与C++类似，关键字是保留的，不能用作变量名或函数名。下面是 ECMAScript 中的关键字列表：</p><ul><li>break</li><li>case</li><li>catch</li><li>continue</li><li>default</li><li>delete</li><li>do</li><li>else</li><li>finally</li><li>for</li><li>function</li><li>if</li><li>in</li><li>instanceof</li><li>new</li><li>return</li><li>switch</li><li>this</li><li>throw</li><li>try</li><li>typeof</li><li>var</li><li>void</li><li>while</li><li>with</li></ul><h2 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h2><p>保留字是留给将来的，可能会作为关键字。保留字也不能用作变量名或函数名。ECMAScript 中有下列保留字：</p><ul><li>abstract</li><li>boolean</li><li>byte</li><li>char</li><li>class</li><li>const</li><li>debugger</li><li>double</li><li>enum</li><li>export</li><li>extends</li><li>final</li><li>float</li><li>goto</li><li>implements</li><li>import</li><li>int</li><li>interface</li><li>long</li><li>native</li><li>package</li><li>private</li><li>protected</li><li>public</li><li>short</li><li>static</li><li>super</li><li>synchronized</li><li>throws</li><li>transient</li><li>volatile</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>QML</tag>
      
      <tag>ECMAScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QML 基础</title>
    <link href="/2021/02/02/qml-base/"/>
    <url>/2021/02/02/qml-base/</url>
    
    <content type="html"><![CDATA[<p><code>QML</code> 是一种类似 <code>CSS</code> 与 <code>JavaScript</code> 相结合的描述用户界面的语言。</p><p><code>QML</code> 实现并扩展了 <code>ECMAScript</code>，是一备战说明性语言，用来描述基于 <code>Qt</code> 对象系统的用户界面。<code>QML</code> 提供了高可读性的，声明式的、类 <code>CSS</code> 的语法，支持结合动态属性绑定的 <code>ECMAScript</code> 表达式。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><code>QML</code> 文件的后缀是 <code>.qml</code>,其实就是文本文件。简单的 QML 文件：</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> QtQuick <span class="hljs-number">2.12</span><br><span class="hljs-keyword">import</span> QtQuick.Window <span class="hljs-number">2.12</span><br><br><span class="hljs-title">Window</span> &#123;<br>    <span class="hljs-attribute">id:</span><span class="hljs-string"> root</span><br>    <span class="hljs-attribute">visible</span>: <span class="hljs-literal">true</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">640</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">480</span><br>    <span class="hljs-attribute">title</span>: qsTr(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>    <span class="hljs-attribute">minimumWidth</span>: <span class="hljs-number">400</span>   <span class="hljs-comment">// 窗口最小宽度</span><br>    <span class="hljs-attribute">minimumHeight</span>: <span class="hljs-number">250</span>  <span class="hljs-comment">// 窗口最小高度</span><br><br>    <span class="hljs-title">Text</span> &#123;<br>        <span class="hljs-attribute">id:</span><span class="hljs-string"> textHello</span><br>        <span class="hljs-attribute">anchors.centerIn</span>: <span class="hljs-built_in">parent</span><br>        <span class="hljs-attribute">text</span>: qsTr(<span class="hljs-string">&quot;Hello,World&quot;</span>)<br>        <span class="hljs-attribute">font.pointSize</span>: <span class="hljs-number">24</span><br>        <span class="hljs-attribute">font.bold</span>: <span class="hljs-literal">true</span><br>        <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;#008787&quot;</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>QML 通过 <code>import xxx</code> 方式导入相关模块。</p><p>Rectangle {} 语句，定以了一个类型为 Rectangle 的对象。对象要用一对花括号来描述，花括号前要写上对象的类型名字（类名）。</p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><p>QML 支持 ECMAScript 表达式。你可以在样初始化 Rectangle 对象的宽、高属性：</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-title">Rectangle</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">22</span>*<span class="hljs-number">10</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">2</span>*<span class="hljs-number">4</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;#ccc&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="引用对象"><a href="#引用对象" class="headerlink" title="引用对象"></a>引用对象</h2><p>QML中用对象的 id 值来引用一个对象。</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-title">Rectangle</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">320</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">480</span><br><br>    <span class="hljs-title">Button</span> &#123;<br>        <span class="hljs-attribute">id:</span><span class="hljs-string"> openFile</span><br>        <span class="hljs-attribute">text</span>: <span class="hljs-string">&quot;打开&quot;</span><br>    &#125;<br><br>    <span class="hljs-title">Button</span> &#123;<br>        <span class="hljs-attribute">id:</span><span class="hljs-string"> quit</span><br>        <span class="hljs-attribute">text</span>: <span class="hljs-string">&quot;退出&quot;</span><br>        <span class="hljs-attribute">anchors.left</span>: openFile.right<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>anchors.left: openFile.right</code> 这句就是使用引用的例子</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p><code>QML</code> 中的注释方式种 c<code>++</code> 中的一样。</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>其实，<code>QML</code> 中的属性，对应于我们非常熟悉的 <code>C++</code>、<code>Java</code> 中类的成员变量…</p><h3 id="属性命名"><a href="#属性命名" class="headerlink" title="属性命名"></a>属性命名</h3><p>属性名的首字母一般以小写开始，如果属性名以多个单词表示，那么第二个及以后的单词，首字母大写。这也是驼峰命名法。</p><h3 id="属性的类型"><a href="#属性的类型" class="headerlink" title="属性的类型"></a>属性的类型</h3><p>可以在 <code>QML</code> 文档中使用的类型大概有三类：</p><ul><li>由 <code>QML</code> 语言本身提供的类型。</li><li>由 <code>QML</code> 模块（比如 <code>Qt</code> <code>Quick</code>）提供的类型。</li><li>导出到 <code>QML</code> 环境中的 <code>C++</code> 类型。</li></ul><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><p><code>QML</code> 支持的基本类型包括 <code>int</code>、<code>real</code>、<code>double</code>、<code>bool</code>、<code>string</code>、<code>color</code>、<code>list</code>、<code>font</code>等。</p><p>请使用 <code>Qt</code>帮助的索引模式，以“qml basic types“为关键字检索，找到 <code>QML Basic Types</code> 页面来查看完整的类型列表和每种类型的详情。</p><p><code>Qt</code> 的 <code>QML</code> 模块还为<code>QML</code> 引入了很多Qt相关的类型，如：<code>Qt</code>、<code>QtObject</code>、<code>Component</code>、<code>Connections</code>、<code>Binding</code>等，请使用 <code>Qt</code> 帮助检索 “qt qml qml types“来了解。</p><h4 id="id属性"><a href="#id属性" class="headerlink" title="id属性"></a>id属性</h4><p>一个对象的 <code>id</code> 属性是唯一的，在同一个 <code>QML</code> 文件中不同对象的 <code>id</code> 属性的值不能重复。</p><h4 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h4><p><code>QML</code> 对象的列表属性（类型是 <code>list</code>）类似于下面这样：</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-title">Item</span> &#123;<br>    <span class="hljs-attribute">children</span>: [<br>        <span class="hljs-title">Image</span> &#123;&#125;,<br>        <span class="hljs-title">Text</span> &#123;&#125;<br>    ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p>列表是包含在方括号内，以逗号分隔的多个元素的集合。<br>其实列表和 <code>ECMAScript</code> 的数组（<code>Array</code>）是类似的，其访问方式也一样：</p><ul><li>可以用[value1,value2,…,valueN]这种形式给 <code>list</code> 对象赋值</li><li><code>length</code> 属性提供了列表内元素的个数</li><li>列表内的元素通过数组下标来放问([index])</li></ul><p>值得注意的是，列表内只能包含<code>QML</code>对象，不能包含任何基本类型的字面量（如：<code>9</code>、<code>true</code>，如果非要包含，需要使用 <code>var</code> 变量）。</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-title">Item</span> &#123;<br>    <span class="hljs-attribute">children</span>: [<br>        <span class="hljs-title">Text</span> &#123;<br>            <span class="hljs-attribute">text</span>: <span class="hljs-string">&quot;textOne&quot;</span><br>        &#125;<br>        <span class="hljs-title">Text</span> &#123;<br>            <span class="hljs-attribute">text</span>: <span class="hljs-string">&quot;textTwo&quot;</span><br>        &#125;<br>    ]<br><br>    <span class="hljs-attribute">Component.onCompleted</span>: &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; children.length; i++) &#123;<br>            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;text of label &quot;</span>, i, <span class="hljs-string">&quot; : &quot;</span>, children[i].text)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果一个列表内只的一个元素，也可以省略方括号，如下所示：</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-title">Item</span> &#123;<br>    <span class="hljs-attribute">children</span>: <span class="hljs-title">Image</span> &#123;&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="信号处理器"><a href="#信号处理器" class="headerlink" title="信号处理器"></a>信号处理器</h4><p>信号处理器，其实等价于 <code>Qt</code> 中的槽。它的名字还有点特别，一般是 on<Signal>这种形式。比如 <code>Qt Quick</code>中的<code>Button</code>元素有一个信号 <code>clicked()</code>，那么你可能会写出这样的代码：</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-title">Rectangle</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">320</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">480</span><br><br>    <span class="hljs-title">Button</span> &#123;<br>        <span class="hljs-attribute">id:</span><span class="hljs-string"> quit</span><br>        <span class="hljs-attribute">text</span>: <span class="hljs-string">&quot;退出&quot;</span><br>        <span class="hljs-attribute">anchors.left</span>: <span class="hljs-built_in">parent</span>.left<br>        <span class="hljs-attribute">anchors.leftMargin</span>: <span class="hljs-number">4</span><br>        <span class="hljs-attribute">anchors.bottom</span>: <span class="hljs-built_in">parent</span>.bottom<br>        <span class="hljs-attribute">anchors.bottomMargin</span>: <span class="hljs-number">4</span><br>        <span class="hljs-attribute">onClicked</span>: &#123;<br>            Qt.quit()<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>你看到了，当信号是 <code>clicked()</code> 时，信号处理器就命名为 <code>onClicked</code>。就这么简单，以 <code>on</code> 起始后跟信号名字（第一个字母大写）。</p><h4 id="分组属性"><a href="#分组属性" class="headerlink" title="分组属性"></a>分组属性</h4><p>在某些情况下使用一个“.“符号或分组符号将相关的属性形成一个逻辑组。有时我们给分组属性赋值是一个个来的，类似于这样：</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-title">Text</span> &#123;<br>    <span class="hljs-attribute">font.pixelSize</span>: <span class="hljs-number">18</span><br>    <span class="hljs-attribute">font.bold</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实下面这样的写法在形式上更贴合分组的含义：</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-title">Text</span>&#123;<br>    <span class="hljs-title">font</span> &#123;<br>        <span class="hljs-attribute">pixelSize</span>: <span class="hljs-number">12</span><br>        <span class="hljs-attribute">bold</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其实中以这么理解，<code>font</code> 属性的类型本身是一个对象，这个对象又有 <code>pixelSize</code>、<code>bold</code>、<code>italic</code>、<code>underline</code> 等属性。对于类型为对象的属性值，可以使用“.”操作符展开对象的每一个成员对其赋值，也可以通过分组符号（一对花括号）把要赋值的成员放在一起给它们赋值。对于后者，其形式和对象的定义一样了，起码看起来没有区别。所以，又可以这么理解上面的示例：<code>Text</code> 对象内聚合了 <code>font</code> 对象。</p><h4 id="附加属性"><a href="#附加属性" class="headerlink" title="附加属性"></a>附加属性</h4><p>在<code>QML</code> 语言的语法中，有一个附加属性（<code>attached properties</code>) 的概念，这是附加到一个对象上的额外的属性。</p><p>举个例子，下面的 <code>Item</code> 对象使用了附加属性：</p><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> QtQuick <span class="hljs-number">2.2</span><br><br><span class="hljs-title">Item</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100</span><br><br>    <span class="hljs-attribute">focus</span>: <span class="hljs-literal">true</span><br>    <span class="hljs-attribute">Keys.enabled</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>Item</code> 对象设置 <code>Keys.enabled</code> 为 <code>false</code>，<code>Keys</code> 就是 <code>Qt Quick</code> 提供的供 <code>Item</code> 处理按键事件的附加属性。与附加属性相似的概念还有附加信号处理器。</p><p>文章内容来自：《Qt Quick 核心编程》</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>QML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一个 Qt Quick 程序</title>
    <link href="/2021/02/02/qt-quick-helloworld/"/>
    <url>/2021/02/02/qt-quick-helloworld/</url>
    
    <content type="html"><![CDATA[<p>用 Qt Create 创建第一个 Qt Quick 程序。</p><h2 id="新建-Qt-Quick-程序"><a href="#新建-Qt-Quick-程序" class="headerlink" title="新建 Qt Quick 程序"></a>新建 Qt Quick 程序</h2><p>新建对话框<br><img src="/img/new-qt-quick.png" alt="new-qt-quick"></p><p>新建完成后的工程结构</p><p><img src="/img/qt-quick-project-struct.png" alt="qt-quick-project-struct"></p><h2 id="main-qml"><a href="#main-qml" class="headerlink" title="main.qml"></a>main.qml</h2><figure class="highlight qml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs qml"><span class="hljs-keyword">import</span> QtQuick <span class="hljs-number">2.12</span><br><span class="hljs-keyword">import</span> QtQuick.Window <span class="hljs-number">2.12</span><br><br><span class="hljs-title">Window</span> &#123;<br>    <span class="hljs-attribute">id:</span><span class="hljs-string"> root</span><br>    <span class="hljs-attribute">visible</span>: <span class="hljs-literal">true</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">640</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">480</span><br>    <span class="hljs-attribute">title</span>: qsTr(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>    <span class="hljs-attribute">minimumWidth</span>: <span class="hljs-number">400</span>   <span class="hljs-comment">// 窗口最小宽度</span><br>    <span class="hljs-attribute">minimumHeight</span>: <span class="hljs-number">250</span>  <span class="hljs-comment">// 窗口最小高度</span><br><br>    <span class="hljs-title">Text</span> &#123;<br>        <span class="hljs-attribute">id:</span><span class="hljs-string"> textHello</span><br>        <span class="hljs-attribute">anchors.centerIn</span>: <span class="hljs-built_in">parent</span><br>        <span class="hljs-attribute">text</span>: qsTr(<span class="hljs-string">&quot;Hello,World&quot;</span>)<br>        <span class="hljs-attribute">font.pointSize</span>: <span class="hljs-number">24</span><br>        <span class="hljs-attribute">font.bold</span>: <span class="hljs-literal">true</span><br>        <span class="hljs-attribute">color</span>: <span class="hljs-string">&quot;#008787&quot;</span><br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>main.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QGuiApplication&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;QQmlApplicationEngine&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);<br><br>    <span class="hljs-function">QGuiApplication <span class="hljs-title">app</span><span class="hljs-params">(argc, argv)</span></span>;<br><br>    QQmlApplicationEngine engine;<br><br>    engine.load(QUrl(QStringLiteral(<span class="hljs-string">&quot;qrc:/main.qml&quot;</span>)));<br><br>    <span class="hljs-keyword">return</span> app.exec();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果</p><p><img src="/img/qt-quick-helloworld-img.png" alt="qt-quick-helloworld-img"></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Qt</tag>
      
      <tag>Qt Quick</tag>
      
      <tag>QML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Qt Quick 动画</title>
    <link href="/2021/01/31/qt-quick-Animation/"/>
    <url>/2021/01/31/qt-quick-Animation/</url>
    
    <content type="html"><![CDATA[<h2 id="常用动画"><a href="#常用动画" class="headerlink" title="常用动画"></a>常用动画</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CMake 入门</title>
    <link href="/2021/01/21/CMake/"/>
    <url>/2021/01/21/CMake/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>CMake is an open-source, cross-platform family of tools designed to build, test and package software. CMake is used to control the software compilation process using simple platform and compiler independent configuration files, and generate native makefiles and workspaces that can be used in the compiler environment of your choice. The suite of CMake tools were created by Kitware in response to the need for a powerful, cross-platform build environment for open-source projects such as ITK and VTK. <a href="https://cmake.org/">https://cmake.org/</a></p></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>我们先用 <code>CMake</code> 来构建一个简单的 <code>c</code> 程序。</p><p>创建 <code>helloworld</code> 文件夹，然后进入这个文件夹，在里边创建一下文件：<br>.<br>├── CMakeLists.txt<br>└── main.c</p><p><code>CMakeLists.txt</code> 是 <code>CMake</code> 的配置文件。<br><code>main.c</code> 是 <code>c</code> 程序的源文件。</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>CMakeLists.txt</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-comment"># cmake 最低版本</span><br><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-comment"># 目标程序</span><br><span class="hljs-keyword">project</span>(zsf_Hello C)<br><br><span class="hljs-comment"># 编译源码生产目标</span><br><span class="hljs-keyword">add_executable</span>(zsf_Hello main.c)<br></code></pre></div></td></tr></table></figure><p>执行 <code>cmake .. </code> 进行构建，执行 <code>make</code> 构建 生成后的Makefile 文件。</p><h2 id="优化目录结构"><a href="#优化目录结构" class="headerlink" title="优化目录结构"></a>优化目录结构</h2><p>新的目录结构如下：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">.<br>├── CMakeLists.txt<br>├── build<br>├── lib<br>│   ├── CMakeLists.txt<br>│   ├── zsf_math.c<br>│   └── zsf_math.h<br>└── src<br>    ├── CMakeLists.txt<br>    └── main.c<br></code></pre></div></td></tr></table></figure><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vala"><span class="hljs-meta"># 顶层 CMakeLists.txt</span><br><br><span class="hljs-meta"># cmake 最低版本</span><br>cmake_minimum_required(VERSION <span class="hljs-number">3.5</span>)<br><br><span class="hljs-meta"># 目标程序</span><br>project(zsf_Hello C)<br><br><span class="hljs-meta"># 添加子目录</span><br>add_subdirectory(./lib)<br>add_subdirectory(./src)<br><br><span class="hljs-meta">#启动对C++14标准的支持</span><br><span class="hljs-meta">#set(CMAKE_CXX_STANDARD 14)</span><br><span class="hljs-meta"># 显式要求指明支持C++标准</span><br><span class="hljs-meta">#set(CMAKE_CXX_STANDARD_REQUIRED True)</span><br><br><span class="hljs-meta"># 启动对C11的支持</span><br><span class="hljs-keyword">set</span>(CMAKE_C_STANDARD <span class="hljs-number">11</span>)<br><span class="hljs-meta"># 显式要求指明支持C标准</span><br><span class="hljs-keyword">set</span>(CMAKE_C_STANDARD_REQUIRED True)<br><br></code></pre></div></td></tr></table></figure><h3 id="src-CMakeLists-txt"><a href="#src-CMakeLists-txt" class="headerlink" title="src/CMakeLists.txt"></a>src/CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-comment"># 源文件 CMakeLists.txt</span><br><br><span class="hljs-comment"># 包含库路径</span><br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<br><br><span class="hljs-comment"># 源文件入口路径</span><br><span class="hljs-keyword">aux_source_directory</span>(./ DIR_SRC)<br><br><span class="hljs-comment"># 设置可执行文件的输出路径</span><br><span class="hljs-keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/bin)<br><br><span class="hljs-comment"># 编译源码生产目标</span><br><span class="hljs-keyword">add_executable</span>(zsf_Hello main.c)<br><br><span class="hljs-comment"># 链接库</span><br><span class="hljs-keyword">target_link_libraries</span>(zsf_Hello zsfMath)<br></code></pre></div></td></tr></table></figure><h3 id="lib-CMakeLists-txt"><a href="#lib-CMakeLists-txt" class="headerlink" title="lib/CMakeLists.txt"></a>lib/CMakeLists.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-comment"># 库文件 CMakeLists.txt</span><br><br><span class="hljs-comment"># 包含源文件路径</span><br><span class="hljs-keyword">aux_source_directory</span>(. DIR_SRC)<br><br><span class="hljs-keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="hljs-variable">$&#123;PROJECT_BINARY_DIR&#125;</span>/lib)<br><br><span class="hljs-comment"># 添加库</span><br><span class="hljs-keyword">add_library</span>(zsfMath STATIC <span class="hljs-variable">$&#123;DIR_SRC&#125;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="src-main-c"><a href="#src-main-c" class="headerlink" title="src/main.c"></a>src/main.c</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;zsf_math.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello,World!\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;结果: %d\n&quot;</span>, add(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="lib-zsf-math-h"><a href="#lib-zsf-math-h" class="headerlink" title="lib/zsf_math.h"></a>lib/zsf_math.h</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> _ZSF_MATH_</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _ZSF_MATH_</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><h3 id="lib-zsf-math-c"><a href="#lib-zsf-math-c" class="headerlink" title="lib/zsf_math.c"></a>lib/zsf_math.c</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;zsf_math.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="判断语句与循环语句"><a href="#判断语句与循环语句" class="headerlink" title="判断语句与循环语句"></a>判断语句与循环语句</h2><h3 id="if-判断语句"><a href="#if-判断语句" class="headerlink" title="if 判断语句"></a>if 判断语句</h3><p>CMake 支持 if 语句。非零为真<br>例子1：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(var <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span>(var)<br>    <span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;var&#125;</span>)<br><span class="hljs-keyword">endif</span>(var)<br></code></pre></div></td></tr></table></figure><p>例子2</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-keyword">set</span>(var <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span>(var)<br>    <span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;var&#125;</span>)<br><span class="hljs-keyword">else</span>(var)<br>    <span class="hljs-keyword">message</span>(<span class="hljs-variable">$&#123;var&#125;</span>)<br><span class="hljs-keyword">endif</span>(var)<br></code></pre></div></td></tr></table></figure><p>例子3</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-comment"># if 语句1</span><br><span class="hljs-keyword">set</span>(Mobile <span class="hljs-string">&quot;小米手机&quot;</span>)<br><span class="hljs-keyword">if</span>(Mobile <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;苹果手机&quot;</span>)<br>    <span class="hljs-keyword">MESSAGE</span>(<span class="hljs-string">&quot;我的手机是苹果的&quot;</span>)<br><span class="hljs-keyword">elseif</span>(Mobile <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;小米手机&quot;</span>)<br>    <span class="hljs-keyword">MESSAGE</span>(<span class="hljs-string">&quot;我的手机是小米的&quot;</span>)<br><span class="hljs-keyword">else</span>(Mobile)<br>    <span class="hljs-keyword">MESSAGE</span>(<span class="hljs-string">&quot;......else......&quot;</span>)<br><span class="hljs-keyword">endif</span>(Mobile)<br></code></pre></div></td></tr></table></figure><h2 id="变量列表"><a href="#变量列表" class="headerlink" title="变量列表"></a>变量列表</h2><ul><li>CMAKE_INSTALL_PREFIX</li><li></li></ul><h2 id="命令列表"><a href="#命令列表" class="headerlink" title="命令列表"></a>命令列表</h2><ol><li>cmake_minimum_required(VERSION 3.5)</li><li>project(zsf_Hello C)</li><li>add_executable(zsf_Hello main.c)</li><li>add_subdirectory(./lib)</li><li>add_library(zsfMath STATIC ${DIR_SRC})</li><li>add_definitions(-DFOO -DTEST)</li><li>include_directories(${PROJECT_SOURCE_DIR}/lib)</li><li>aux_source_directory(. DIR_SRC)</li><li>set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)</li><li>set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)</li><li>file()</li><li>set_target_properties()</li><li>message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR]<br>“message to display” …)</li><li>INSTALL()</li></ol><h3 id="set-property"><a href="#set-property" class="headerlink" title="set_property()"></a>set_property()</h3><figure class="highlight fsharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs fsharp">set_property(&lt;GLOBAL                      |<br>              DIRECTORY <span class="hljs-meta">[&lt;dir&gt;]</span>           |<br>              TARGET    <span class="hljs-meta">[&lt;target1&gt; ...]   |</span><br><span class="hljs-meta">              SOURCE    [&lt;src1&gt; ...]      |</span><br><span class="hljs-meta">              INSTALL   [&lt;file1&gt; ...]     |</span><br><span class="hljs-meta">              TEST      [&lt;test1&gt; ...]     |</span><br><span class="hljs-meta">              CACHE     [&lt;entry1&gt; ...]    &gt;</span><br><span class="hljs-meta">             [APPEND] [APPEND_STRING]</span><br><span class="hljs-meta">             PROPERTY &lt;name&gt; [value1 ...])</span><br></code></pre></div></td></tr></table></figure><h3 id="set-target-properties"><a href="#set-target-properties" class="headerlink" title="set_target_properties()"></a>set_target_properties()</h3><p><code>SET_TARGET_PROPERTIES</code>，其基本语法是：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">SET_TARGET_PROPERTIES</span>(target<span class="hljs-number">1</span> target<span class="hljs-number">2</span> ...<br><span class="hljs-attribute">PROPERTIES</span> prop<span class="hljs-number">1</span> value<span class="hljs-number">1</span><br><span class="hljs-attribute">prop2</span> value<span class="hljs-number">2</span> ...)<br></code></pre></div></td></tr></table></figure><p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和API版本。<br>在本例中，我们需要作的是向<code>lib/CMakeLists.txt</code>中添加一条：<br><code>SET_TARGET_PROPERTIES(hello_static PROPERTIES OUTPUT_NAME &quot;hello&quot;)</code><br>这样，我们就可以同时得到<code>libhello.so/libhello.a</code>两个库了。</p><h3 id="GET-TARGET-PROPERTY-VAR-target-property"><a href="#GET-TARGET-PROPERTY-VAR-target-property" class="headerlink" title="GET_TARGET_PROPERTY(VAR target property)"></a>GET_TARGET_PROPERTY(VAR target property)</h3><p><code>GET_TARGET_PROPERTY(VAR target property)</code><br>具体用法如下例，我们向<code>lib/CMakeListst.txt</code>中添加：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-keyword">GET_TARGET_PROPERTY</span>(OUTPUT_VALUE hello_static OUTPUT_NAME)<br><span class="hljs-keyword">MESSAGE</span>(STATUS “This is the hello_static<br>OUTPUT_NAME:”<span class="hljs-variable">$&#123;OUTPUT_VALUE&#125;</span>)<br></code></pre></div></td></tr></table></figure><p>如果没有这个属性定义，则返回<code>NOTFOUND</code>.</p><h3 id="message"><a href="#message" class="headerlink" title="message()"></a>message()</h3><p>函数原型<br> message( [STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR]<br>  “message to display” …)</p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">(无) = 重要信息<span class="hljs-comment">;</span><br><span class="hljs-attribute">STATUS</span> = 非重要信息<span class="hljs-comment">;</span><br><span class="hljs-attribute">WARNING</span> = CMake 警告，会继续执行<span class="hljs-comment">;</span><br>AUTHOR_WARNING = CMake 警告（dev），会继续执行<span class="hljs-comment">;</span><br>SEND_ERROR = CMake 错误，继续执行，但是会跳过生成的步骤<span class="hljs-comment">;</span><br>FATAL_ERROR = CMake 错误，终止所有处理过程<br></code></pre></div></td></tr></table></figure><p>例子：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake"><span class="hljs-comment">#Message</span><br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;BINARY 路径&quot;</span> <span class="hljs-variable">$&#123;PROJECT_BINARY_DIR&#125;</span>)<br><span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;SOURCE 路径&quot;</span> <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>)<br></code></pre></div></td></tr></table></figure><h3 id="安装命令-INSTALL"><a href="#安装命令-INSTALL" class="headerlink" title="安装命令 INSTALL"></a>安装命令 INSTALL</h3><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">INSTALL(TARGETS targets...<br><span class="hljs-comment">[<span class="hljs-comment">[ARCHIVE|LIBRARY|RUNTIME]</span></span><br><span class="hljs-comment"><span class="hljs-comment">[DESTINATION &lt;dir&gt;]</span></span><br><span class="hljs-comment"><span class="hljs-comment">[PERMISSIONS permissions...]</span></span><br><span class="hljs-comment"><span class="hljs-comment">[CONFIGURATIONS</span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">[Debug|Release|...]</span>]</span></span><br><span class="hljs-comment"><span class="hljs-comment">[COMPONENT &lt;component&gt;]</span></span><br><span class="hljs-comment"><span class="hljs-comment">[OPTIONAL]</span></span><br><span class="hljs-comment">]</span> <span class="hljs-comment">[...]</span>)<br></code></pre></div></td></tr></table></figure><p>参数中的<code>TARGETS</code>后面跟的就是我们通过<code>ADD_EXECUTABLE</code>或者<code>ADD_LIBRARY</code>定义的<br>目标文件，可能是可执行二进制、动态库、静态库。</p><p>目标类型也就相对应的有三种，ARCHIVE特指静态库，LIBRARY特指动态库，RUNTIME<br>特指可执行目标二进制。</p><p><code>DESTINATION</code>定义了安装的路径，如果路径以/开头，那么指的是绝对路径，这时候<br><code>CMAKE_INSTALL_PREFIX</code>其实就无效了。如果你希望使用<code>CMAKE_INSTALL_PREFIX</code>来<br>定义安装路径，就要写成相对路径，即不要以<code>/</code>开头，那么安装后的路径就是<br><code>$&#123;CMAKE_INSTALL_PREFIX&#125;/&lt;DESTINATION定义的路径&gt;</code></p><span class="label label-primary">举个简单的例子：</span><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">INSTALL(TARGETS myrun mylib mystaticlib<br>RUNTIME DESTINATION bin<br>LIBRARY DESTINATION <span class="hljs-class"><span class="hljs-keyword">lib</span></span><br>ARCHIVE DESTINATION libstatic<br>)<br></code></pre></div></td></tr></table></figure><p>上面的例子会将：<br>可执行二进制<code>myrun</code>安装到<code>$&#123;CMAKE_INSTALL_PREFIX&#125;/bin</code>目录<br>动态库<code>libmylib</code>安装到<code>$&#123;CMAKE_INSTALL_PREFIX&#125;/lib</code>目录<br>静态库<code>libmystaticlib</code>安装到<code>$&#123;CMAKE_INSTALL_PREFIX&#125;/libstatic</code>目录</p><p>特别注意的是你不需要关心<code>TARGETS</code>具体生成的路径，只需要写上<code>TARGETS</code>名称就可以<br>了。<br>普</p><span class="label label-success">普通文件的安装：</span><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">INSTALL(FILES files... DESTINATION &lt;dir&gt;<br><span class="hljs-comment">[PERMISSIONS permissions...]</span><br><span class="hljs-comment">[CONFIGURATIONS <span class="hljs-comment">[Debug|Release|...]</span>]</span><br><span class="hljs-comment">[COMPONENT &lt;component&gt;]</span><br><span class="hljs-comment">[RENAME &lt;name&gt;]</span> <span class="hljs-comment">[OPTIONAL]</span>)<br></code></pre></div></td></tr></table></figure><p>可用于安装一般文件，并可以指定访问权限，文件名是此指令所在路径下的相对路径。如果<br>默认不定义权限<code>PERMISSIONS</code>，安装后的权限为：<br><code>OWNER_WRITE</code>, <code>OWNER_READ</code>, <code>GROUP_READ</code>,和<code>WORLD_READ</code>，即<code>644</code>权限。</p><span class="label label-success">非目标文件的可执行程序安装(比如脚本之类)：</span><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">INSTALL(PROGRAMS files... DESTINATION &lt;dir&gt;<br><span class="hljs-comment">[PERMISSIONS permissions...]</span><br><span class="hljs-comment">[CONFIGURATIONS <span class="hljs-comment">[Debug|Release|...]</span>]</span><br><span class="hljs-comment">[COMPONENT &lt;component&gt;]</span><br><span class="hljs-comment">[RENAME &lt;name&gt;]</span> <span class="hljs-comment">[OPTIONAL]</span>)<br></code></pre></div></td></tr></table></figure><p>跟上面的<code>FILES</code>指令使用方法一样，唯一的不同是安装后权限为:<br><code>OWNER_EXECUTE</code>, <code>GROUP_EXECUTE</code>, 和<code>WORLD_EXECUTE</code>，即<code>755</code>权限</p><span class="label label-success">目录的安装：</span><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs inform7">INSTALL(DIRECTORY dirs... DESTINATION &lt;dir&gt;<br><span class="hljs-comment">[FILE_PERMISSIONS permissions...]</span><br><span class="hljs-comment">[DIRECTORY_PERMISSIONS permissions...]</span><br><span class="hljs-comment">[USE_SOURCE_PERMISSIONS]</span><br><span class="hljs-comment">[CONFIGURATIONS <span class="hljs-comment">[Debug|Release|...]</span>]</span><br><span class="hljs-comment">[COMPONENT &lt;component&gt;]</span><br><span class="hljs-comment">[<span class="hljs-comment">[PATTERN &lt;pattern&gt; | REGEX &lt;regex&gt;]</span></span><br><span class="hljs-comment"><span class="hljs-comment">[EXCLUDE]</span> <span class="hljs-comment">[PERMISSIONS permissions...]</span>]</span> <span class="hljs-comment">[...]</span>)<br></code></pre></div></td></tr></table></figure><p>这里主要介绍其中的<code>DIRECTORY</code>、<code>PATTERN</code>以及<code>PERMISSIONS</code>参数。<br><code>DIRECTORY</code>后面连接的是所在<code>Source</code>目录的相对路径，但务必注意：<br><code>abc</code>和<code>abc/</code>有很大的区别。<br>如果目录名不以<code>/</code>结尾，那么这个目录将被安装为目标路径下的<code>abc</code>，如果目录名以<code>/</code>结尾，<br>代表将这个目录中的内容安装到目标路径，但不包括这个目录本身。<br><code>PATTERN</code>用于使用正则表达式进行过滤，<code>PERMISSIONS</code>用于指定<code>PATTERN</code>过滤后的文件<br>权限。</p><p>我们来看一个例子:</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">INSTALL(DIRECTORY icons scripts<span class="hljs-regexp">/ DESTINATION share/my</span>proj<br>PATTERN <span class="hljs-string">&quot;CVS&quot;</span> <span class="hljs-keyword">EXCLUDE</span><br>PATTERN <span class="hljs-string">&quot;scripts/*&quot;</span><br>PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ<br>GROUP_EXECUTE GROUP_READ)<br></code></pre></div></td></tr></table></figure><p>这条指令的执行结果是：<br>将<code>icons</code>目录安装到 <code>&lt;prefix&gt;/share/myproj</code>，将<code>scripts/</code>中的内容安装到<br><code>&lt;prefix&gt;/share/myproj</code><br>不包含目录名为<code>CVS</code>的目录，对于<code>scripts/*</code>文件指定权限为 <code>OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ.</code></p><p>安装时CMAKE脚本的执行：<br><code>INSTALL([[SCRIPT &lt;file&gt;] [CODE &lt;code&gt;]] [...])</code><br><code>SCRIPT</code>参数用于在安装时调用cmake脚本文件（也就是<code>&lt;abc&gt;.cmake</code>文件）<br><code>CODE</code>参数用于执行<code>CMAKE</code>指令，必须以双引号括起来。比如：<br><code>INSTALL(CODE &quot;MESSAGE(\&quot;Sample install message.\&quot;)&quot;)</code></p><p>安装还有几个被标记为过时的指令，比如<code>INSTALL_FILES</code>等，这些指令已经不再推荐使<br>用，所以，这里就不再赘述了。</p><h2 id="动态库版本号"><a href="#动态库版本号" class="headerlink" title="动态库版本号"></a>动态库版本号</h2><p>按照规则，动态库是应该包含一个版本号的，我们可以看一下系统的动态库，一般情况是</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">libhello</span>.so.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">libhello</span>.so -&gt;libhello.so.<span class="hljs-number">1</span><br><span class="hljs-attribute">libhello</span>.so.<span class="hljs-number">1</span>-&gt;libhello.so.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>为了实现动态库版本号，我们仍然需要使用<code>SET_TARGET_PROPERTIES</code>指令。<br>具体使用方法如下：<br><code>SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)</code><br><code>VERSION</code>指代动态库版本，<code>SOVERSION</code>指代<code>API</code>版本。<br>将上述指令加入<code>lib/CMakeLists.txt</code>中，重新构建看看结果。<br>在<code>build/lib</code>目录会生成：</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">libhello</span>.so.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">libhello</span>.so.<span class="hljs-number">1</span>-&gt;libhello.so.<span class="hljs-number">1</span>.<span class="hljs-number">2</span><br><span class="hljs-attribute">libhello</span>.so -&gt;libhello.so.<span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>终端实例</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">zsf99@DESKTOP-N25R117:~/CExample/cmake_demo/libhello/build/lib$ ll<br>total 44<br>drwxr-xr-x 3 zsf90 zsf90  4096 Jan 22 16:26 ./<br>drwxr-xr-x 4 zsf90 zsf90  4096 Jan 22 16:26 ../<br>drwxr-xr-x 5 zsf90 zsf90  4096 Jan 22 16:26 CMakeFiles/<br>-rw-r--r-- 1 zsf90 zsf90  6600 Jan 22 16:07 Makefile<br>-rw-r--r-- 1 zsf90 zsf90  1134 Jan 22 15:12 cmake_install.cmake<br>-rw-r--r-- 1 zsf90 zsf90  1822 Jan 22 16:26 libhello.a<br>lrwxrwxrwx 1 zsf90 zsf90    13 Jan 22 16:26 libhello.so -&gt; libhello.so.1*<br>lrwxrwxrwx 1 zsf90 zsf90    15 Jan 22 16:26 libhello.so.1 -&gt; libhello.so.1.2*<br>-rwxr-xr-x 1 zsf90 zsf90 16200 Jan 22 16:26 libhello.so.1.2*<br></code></pre></div></td></tr></table></figure><h2 id="CMake模块"><a href="#CMake模块" class="headerlink" title="CMake模块"></a>CMake模块</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言中&quot;return;&quot;的使用介绍</title>
    <link href="/2021/01/06/c-language-return-semicolon/"/>
    <url>/2021/01/06/c-language-return-semicolon/</url>
    
    <content type="html"><![CDATA[<p>在 <code>C语言</code>中 <code>return;</code> 用于从返回值为 <code>void</code> 的函数中强制结束函数，把程序的控制权交给函数的调用者。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">demo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a 小于0\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 直接跳出函数</span><br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;测试能否执行到这里\n&quot;</span>); <span class="hljs-comment">// 如果 a &lt; 0, 则这条语句不会被执行到</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    demo(<span class="hljs-number">-5</span>);<br>    <span class="hljs-comment">//demo(5);</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>return;</code> 用在返回值为 <code>void</code> 的函数中的场景很多，所有有必要掌握使用它。</p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32 USART 函数列表和一些类型定义</title>
    <link href="/2021/01/05/stm32-hal-uart-1/"/>
    <url>/2021/01/05/stm32-hal-uart-1/</url>
    
    <content type="html"><![CDATA[<p>本篇文章是一篇介绍 STM32 USART 相关函数的笔记，下次忘记的时候可以方便查找。</p><h2 id="串口寄存器列表"><a href="#串口寄存器列表" class="headerlink" title="串口寄存器列表"></a>串口寄存器列表</h2><ol><li>状态寄存器 (USART_SR)</li><li>数据寄存器 (USART_DR)</li><li>波特率寄存器 (USART_BRR)</li><li>智能卡模式下的保护时间寄存器 (USART_GTPR)</li><li></li></ol><p>与STM32 USART 相关的函数和一些类型。</p><h2 id="函数列表"><a href="#函数列表" class="headerlink" title="函数列表"></a>函数列表</h2><ul><li>HAL_UART_Abort()</li><li>HAL_UART_Abort_IT()</li><li>HAL_UART_AbortCpltCallback()</li><li>HAL_UART_AbortReceive()</li><li>HAL_UART_AbortReceive_IT()</li><li>HAL_UART_AbortReceiveCpltCallback()</li><li>HAL_UART_AbortTransmit()</li><li>HAL_UART_AbortTransmit_IT()</li><li>HAL_UART_AbortTransmitCpltCallback()</li><li>HAL_UART_DeInit()</li><li>HAL_UART_DMAPause()</li><li>HAL_UART_DMAResume()</li><li>HAL_UART_DMAStop()</li><li>HAL_UART_ErrorCallback()</li><li>HAL_UART_GetError()</li><li>HAL_UART_GetState()</li><li>HAL_UART_Init()</li><li>HAL_UART_IRQHandler()</li><li>HAL_UART_MspDeInit()</li><li>HAL_UART_Receive()</li><li>HAL_UART_Receive_DMA()</li><li>HAL_UART_Receive_IT()</li><li>HAL_UART_RxCpltCallback()</li><li>HAL_UART_Transmit()</li><li>HAL_UART_Transmit_DMA()</li><li>HAL_UART_Transmit_IT()</li><li>HAL_UART_TxCpltCallback()</li><li>HAL_UART_TxHalfCpltCallback()</li><li>HAL_HalfDuplex_EnableTransmitter()</li></ul><h3 id="HAL-UART-Abort-UART-HandleTypeDef-huart"><a href="#HAL-UART-Abort-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_Abort(UART_HandleTypeDef *huart)"></a>HAL_UART_Abort(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_Abort</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</span><br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));<br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_EIE);<br><br>  <span class="hljs-comment">/* Disable the UART DMA Tx request if enabled */</span><br>  <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT))<br>  &#123;<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmatx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Set the UART DMA Abort callback to Null.</span><br><span class="hljs-comment">         No call back execution at end of DMA abort procedure */</span><br>      huart-&gt;hdmatx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br><br>      <span class="hljs-keyword">if</span> (HAL_DMA_Abort(huart-&gt;hdmatx) != HAL_OK)<br>      &#123;<br>        <span class="hljs-keyword">if</span> (HAL_DMA_GetError(huart-&gt;hdmatx) == HAL_DMA_ERROR_TIMEOUT)<br>        &#123;<br>          <span class="hljs-comment">/* Set error code to DMA */</span><br>          huart-&gt;ErrorCode = HAL_UART_ERROR_DMA;<br><br>          <span class="hljs-keyword">return</span> HAL_TIMEOUT;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* Disable the UART DMA Rx request if enabled */</span><br>  <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR))<br>  &#123;<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmarx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Set the UART DMA Abort callback to Null.</span><br><span class="hljs-comment">         No call back execution at end of DMA abort procedure */</span><br>      huart-&gt;hdmarx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br><br>      <span class="hljs-keyword">if</span> (HAL_DMA_Abort(huart-&gt;hdmarx) != HAL_OK)<br>      &#123;<br>        <span class="hljs-keyword">if</span> (HAL_DMA_GetError(huart-&gt;hdmarx) == HAL_DMA_ERROR_TIMEOUT)<br>        &#123;<br>          <span class="hljs-comment">/* Set error code to DMA */</span><br>          huart-&gt;ErrorCode = HAL_UART_ERROR_DMA;<br><br>          <span class="hljs-keyword">return</span> HAL_TIMEOUT;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* Reset Tx and Rx transfer counters */</span><br>  huart-&gt;TxXferCount = <span class="hljs-number">0x00</span>U;<br>  huart-&gt;RxXferCount = <span class="hljs-number">0x00</span>U;<br><br>  <span class="hljs-comment">/* Reset ErrorCode */</span><br>  huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br><br>  <span class="hljs-comment">/* Restore huart-&gt;RxState and huart-&gt;gState to Ready */</span><br>  huart-&gt;RxState = HAL_UART_STATE_READY;<br>  huart-&gt;gState = HAL_UART_STATE_READY;<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-Abort-IT-UART-HandleTypeDef-huart"><a href="#HAL-UART-Abort-IT-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_Abort_IT(UART_HandleTypeDef *huart)"></a>HAL_UART_Abort_IT(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_Abort_IT</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> AbortCplt = <span class="hljs-number">0x01</span>U;<br><br>  <span class="hljs-comment">/* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</span><br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));<br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_EIE);<br><br>  <span class="hljs-comment">/* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised</span><br><span class="hljs-comment">     before any call to DMA Abort functions */</span><br>  <span class="hljs-comment">/* DMA Tx Handle is valid */</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;hdmatx != <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-comment">/* Set DMA Abort Complete callback if UART DMA Tx request if enabled.</span><br><span class="hljs-comment">       Otherwise, set it to NULL */</span><br>    <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT))<br>    &#123;<br>      huart-&gt;hdmatx-&gt;XferAbortCallback = UART_DMATxAbortCallback;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      huart-&gt;hdmatx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">/* DMA Rx Handle is valid */</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;hdmarx != <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-comment">/* Set DMA Abort Complete callback if UART DMA Rx request if enabled.</span><br><span class="hljs-comment">       Otherwise, set it to NULL */</span><br>    <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR))<br>    &#123;<br>      huart-&gt;hdmarx-&gt;XferAbortCallback = UART_DMARxAbortCallback;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      huart-&gt;hdmarx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* Disable the UART DMA Tx request if enabled */</span><br>  <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT))<br>  &#123;<br>    <span class="hljs-comment">/* Disable DMA Tx at UART level */</span><br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmatx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* UART Tx DMA Abort callback has already been initialised :</span><br><span class="hljs-comment">         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */</span><br><br>      <span class="hljs-comment">/* Abort DMA TX */</span><br>      <span class="hljs-keyword">if</span> (HAL_DMA_Abort_IT(huart-&gt;hdmatx) != HAL_OK)<br>      &#123;<br>        huart-&gt;hdmatx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        AbortCplt = <span class="hljs-number">0x00</span>U;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* Disable the UART DMA Rx request if enabled */</span><br>  <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR))<br>  &#123;<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmarx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* UART Rx DMA Abort callback has already been initialised :</span><br><span class="hljs-comment">         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */</span><br><br>      <span class="hljs-comment">/* Abort DMA RX */</span><br>      <span class="hljs-keyword">if</span> (HAL_DMA_Abort_IT(huart-&gt;hdmarx) != HAL_OK)<br>      &#123;<br>        huart-&gt;hdmarx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br>        AbortCplt = <span class="hljs-number">0x01</span>U;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        AbortCplt = <span class="hljs-number">0x00</span>U;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* if no DMA abort complete callback execution is required =&gt; call user Abort Complete callback */</span><br>  <span class="hljs-keyword">if</span> (AbortCplt == <span class="hljs-number">0x01</span>U)<br>  &#123;<br>    <span class="hljs-comment">/* Reset Tx and Rx transfer counters */</span><br>    huart-&gt;TxXferCount = <span class="hljs-number">0x00</span>U;<br>    huart-&gt;RxXferCount = <span class="hljs-number">0x00</span>U;<br><br>    <span class="hljs-comment">/* Reset ErrorCode */</span><br>    huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br><br>    <span class="hljs-comment">/* Restore huart-&gt;gState and huart-&gt;RxState to Ready */</span><br>    huart-&gt;gState  = HAL_UART_STATE_READY;<br>    huart-&gt;RxState = HAL_UART_STATE_READY;<br><br>    <span class="hljs-comment">/* As no DMA to be aborted, call directly user Abort complete callback */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>    <span class="hljs-comment">/* Call registered Abort complete callback */</span><br>    huart-&gt;AbortCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    <span class="hljs-comment">/* Call legacy weak Abort complete callback */</span><br>    HAL_UART_AbortCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-AbortCpltCallback-UART-HandleTypeDef-huart"><a href="#HAL-UART-AbortCpltCallback-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)"></a>HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">__weak <span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_AbortCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br></code></pre></div></td></tr></table></figure><p>这是 <code>UART</code> 中止完成后调用的回调函数，需要自己根据需求进行实现。</p><h3 id="HAL-UART-AbortReceive-UART-HandleTypeDef-huart"><a href="#HAL-UART-AbortReceive-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_AbortReceive(UART_HandleTypeDef *huart)"></a>HAL_UART_AbortReceive(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_AbortReceive</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</span><br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));<br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_EIE);<br><br>  <span class="hljs-comment">/* Disable the UART DMA Rx request if enabled */</span><br>  <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR))<br>  &#123;<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmarx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Set the UART DMA Abort callback to Null.</span><br><span class="hljs-comment">         No call back execution at end of DMA abort procedure */</span><br>      huart-&gt;hdmarx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br><br>      <span class="hljs-keyword">if</span> (HAL_DMA_Abort(huart-&gt;hdmarx) != HAL_OK)<br>      &#123;<br>        <span class="hljs-keyword">if</span> (HAL_DMA_GetError(huart-&gt;hdmarx) == HAL_DMA_ERROR_TIMEOUT)<br>        &#123;<br>          <span class="hljs-comment">/* Set error code to DMA */</span><br>          huart-&gt;ErrorCode = HAL_UART_ERROR_DMA;<br><br>          <span class="hljs-keyword">return</span> HAL_TIMEOUT;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* Reset Rx transfer counter */</span><br>  huart-&gt;RxXferCount = <span class="hljs-number">0x00</span>U;<br><br>  <span class="hljs-comment">/* Restore huart-&gt;RxState to Ready */</span><br>  huart-&gt;RxState = HAL_UART_STATE_READY;<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-AbortReceive-IT-UART-HandleTypeDef-huart"><a href="#HAL-UART-AbortReceive-IT-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)"></a>HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_AbortReceive_IT</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</span><br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));<br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_EIE);<br><br>  <span class="hljs-comment">/* Disable the UART DMA Rx request if enabled */</span><br>  <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR))<br>  &#123;<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmarx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Set the UART DMA Abort callback :</span><br><span class="hljs-comment">         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */</span><br>      huart-&gt;hdmarx-&gt;XferAbortCallback = UART_DMARxOnlyAbortCallback;<br><br>      <span class="hljs-comment">/* Abort DMA RX */</span><br>      <span class="hljs-keyword">if</span> (HAL_DMA_Abort_IT(huart-&gt;hdmarx) != HAL_OK)<br>      &#123;<br>        <span class="hljs-comment">/* Call Directly huart-&gt;hdmarx-&gt;XferAbortCallback function in case of error */</span><br>        huart-&gt;hdmarx-&gt;XferAbortCallback(huart-&gt;hdmarx);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-comment">/* Reset Rx transfer counter */</span><br>      huart-&gt;RxXferCount = <span class="hljs-number">0x00</span>U;<br><br>      <span class="hljs-comment">/* Restore huart-&gt;RxState to Ready */</span><br>      huart-&gt;RxState = HAL_UART_STATE_READY;<br><br>      <span class="hljs-comment">/* As no DMA to be aborted, call directly user Abort complete callback */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>      <span class="hljs-comment">/* Call registered Abort Receive Complete Callback */</span><br>      huart-&gt;AbortReceiveCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>      <span class="hljs-comment">/* Call legacy weak Abort Receive Complete Callback */</span><br>      HAL_UART_AbortReceiveCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">/* Reset Rx transfer counter */</span><br>    huart-&gt;RxXferCount = <span class="hljs-number">0x00</span>U;<br><br>    <span class="hljs-comment">/* Restore huart-&gt;RxState to Ready */</span><br>    huart-&gt;RxState = HAL_UART_STATE_READY;<br><br>    <span class="hljs-comment">/* As no DMA to be aborted, call directly user Abort complete callback */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>    <span class="hljs-comment">/* Call registered Abort Receive Complete Callback */</span><br>    huart-&gt;AbortReceiveCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    <span class="hljs-comment">/* Call legacy weak Abort Receive Complete Callback */</span><br>    HAL_UART_AbortReceiveCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-AbortReceiveCpltCallback-UART-HandleTypeDef-huart"><a href="#HAL-UART-AbortReceiveCpltCallback-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)"></a>HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">__weak <span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_AbortReceiveCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>  UNUSED(huart);<br><br>  <span class="hljs-comment">/* NOTE : This function should not be modified, when the callback is needed,</span><br><span class="hljs-comment">            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.</span><br><span class="hljs-comment">   */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-AbortTransmit-UART-HandleTypeDef-huart"><a href="#HAL-UART-AbortTransmit-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)"></a>HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_AbortTransmit</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Disable TXEIE and TCIE interrupts */</span><br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));<br><br>  <span class="hljs-comment">/* Disable the UART DMA Tx request if enabled */</span><br>  <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT))<br>  &#123;<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmatx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Set the UART DMA Abort callback to Null.</span><br><span class="hljs-comment">         No call back execution at end of DMA abort procedure */</span><br>      huart-&gt;hdmatx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br><br>      <span class="hljs-keyword">if</span> (HAL_DMA_Abort(huart-&gt;hdmatx) != HAL_OK)<br>      &#123;<br>        <span class="hljs-keyword">if</span> (HAL_DMA_GetError(huart-&gt;hdmatx) == HAL_DMA_ERROR_TIMEOUT)<br>        &#123;<br>          <span class="hljs-comment">/* Set error code to DMA */</span><br>          huart-&gt;ErrorCode = HAL_UART_ERROR_DMA;<br><br>          <span class="hljs-keyword">return</span> HAL_TIMEOUT;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* Reset Tx transfer counter */</span><br>  huart-&gt;TxXferCount = <span class="hljs-number">0x00</span>U;<br><br>  <span class="hljs-comment">/* Restore huart-&gt;gState to Ready */</span><br>  huart-&gt;gState = HAL_UART_STATE_READY;<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-AbortTransmit-IT-UART-HandleTypeDef-huart"><a href="#HAL-UART-AbortTransmit-IT-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)"></a>HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_AbortTransmit_IT</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Disable TXEIE and TCIE interrupts */</span><br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));<br><br>  <span class="hljs-comment">/* Disable the UART DMA Tx request if enabled */</span><br>  <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT))<br>  &#123;<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmatx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      <span class="hljs-comment">/* Set the UART DMA Abort callback :</span><br><span class="hljs-comment">         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */</span><br>      huart-&gt;hdmatx-&gt;XferAbortCallback = UART_DMATxOnlyAbortCallback;<br><br>      <span class="hljs-comment">/* Abort DMA TX */</span><br>      <span class="hljs-keyword">if</span> (HAL_DMA_Abort_IT(huart-&gt;hdmatx) != HAL_OK)<br>      &#123;<br>        <span class="hljs-comment">/* Call Directly huart-&gt;hdmatx-&gt;XferAbortCallback function in case of error */</span><br>        huart-&gt;hdmatx-&gt;XferAbortCallback(huart-&gt;hdmatx);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-comment">/* Reset Tx transfer counter */</span><br>      huart-&gt;TxXferCount = <span class="hljs-number">0x00</span>U;<br><br>      <span class="hljs-comment">/* Restore huart-&gt;gState to Ready */</span><br>      huart-&gt;gState = HAL_UART_STATE_READY;<br><br>      <span class="hljs-comment">/* As no DMA to be aborted, call directly user Abort complete callback */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>      <span class="hljs-comment">/* Call registered Abort Transmit Complete Callback */</span><br>      huart-&gt;AbortTransmitCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>      <span class="hljs-comment">/* Call legacy weak Abort Transmit Complete Callback */</span><br>      HAL_UART_AbortTransmitCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-comment">/* Reset Tx transfer counter */</span><br>    huart-&gt;TxXferCount = <span class="hljs-number">0x00</span>U;<br><br>    <span class="hljs-comment">/* Restore huart-&gt;gState to Ready */</span><br>    huart-&gt;gState = HAL_UART_STATE_READY;<br><br>    <span class="hljs-comment">/* As no DMA to be aborted, call directly user Abort complete callback */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>    <span class="hljs-comment">/* Call registered Abort Transmit Complete Callback */</span><br>    huart-&gt;AbortTransmitCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    <span class="hljs-comment">/* Call legacy weak Abort Transmit Complete Callback */</span><br>    HAL_UART_AbortTransmitCpltCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-AbortTransmitCpltCallback-UART-HandleTypeDef-huart"><a href="#HAL-UART-AbortTransmitCpltCallback-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)"></a>HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">__weak <span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_AbortTransmitCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>  UNUSED(huart);<br><br>  <span class="hljs-comment">/* NOTE : This function should not be modified, when the callback is needed,</span><br><span class="hljs-comment">            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.</span><br><span class="hljs-comment">   */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-DeInit-UART-HandleTypeDef-huart"><a href="#HAL-UART-DeInit-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_DeInit(UART_HandleTypeDef *huart)"></a>HAL_UART_DeInit(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_DeInit</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Check the UART handle allocation */</span><br>  <span class="hljs-keyword">if</span> (huart == <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-keyword">return</span> HAL_ERROR;<br>  &#125;<br><br>  <span class="hljs-comment">/* Check the parameters */</span><br>  assert_param(IS_UART_INSTANCE(huart-&gt;Instance));<br><br>  huart-&gt;gState = HAL_UART_STATE_BUSY;<br><br>  <span class="hljs-comment">/* Disable the Peripheral */</span><br>  __HAL_UART_DISABLE(huart);<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;MspDeInitCallback == <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    huart-&gt;MspDeInitCallback = HAL_UART_MspDeInit;<br>  &#125;<br>  <span class="hljs-comment">/* DeInit the low level hardware */</span><br>  huart-&gt;MspDeInitCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>  <span class="hljs-comment">/* DeInit the low level hardware */</span><br>  HAL_UART_MspDeInit(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* (USE_HAL_UART_REGISTER_CALLBACKS) */</span></span><br><br>  huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br>  huart-&gt;gState = HAL_UART_STATE_RESET;<br>  huart-&gt;RxState = HAL_UART_STATE_RESET;<br><br>  <span class="hljs-comment">/* Process Unlock */</span><br>  __HAL_UNLOCK(huart);<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-DMAPause-UART-HandleTypeDef-huart"><a href="#HAL-UART-DMAPause-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_DMAPause(UART_HandleTypeDef *huart)"></a>HAL_UART_DMAPause(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief Pauses the DMA Transfer.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_DMAPause</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> dmarequest = <span class="hljs-number">0x00</span>U;<br><br>  <span class="hljs-comment">/* Process Locked */</span><br>  __HAL_LOCK(huart);<br><br>  dmarequest = HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br>  <span class="hljs-keyword">if</span> ((huart-&gt;gState == HAL_UART_STATE_BUSY_TX) &amp;&amp; dmarequest)<br>  &#123;<br>    <span class="hljs-comment">/* Disable the UART DMA Tx request */</span><br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br>  &#125;<br><br>  dmarequest = HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br>  <span class="hljs-keyword">if</span> ((huart-&gt;RxState == HAL_UART_STATE_BUSY_RX) &amp;&amp; dmarequest)<br>  &#123;<br>    <span class="hljs-comment">/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */</span><br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR1, USART_CR1_PEIE);<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_EIE);<br><br>    <span class="hljs-comment">/* Disable the UART DMA Rx request */</span><br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br>  &#125;<br><br>  <span class="hljs-comment">/* Process Unlocked */</span><br>  __HAL_UNLOCK(huart);<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-DMAResume-UART-HandleTypeDef-huart"><a href="#HAL-UART-DMAResume-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_DMAResume(UART_HandleTypeDef *huart)"></a>HAL_UART_DMAResume(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief Resumes the DMA Transfer.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_DMAResume</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Process Locked */</span><br>  __HAL_LOCK(huart);<br><br>  <span class="hljs-keyword">if</span> (huart-&gt;gState == HAL_UART_STATE_BUSY_TX)<br>  &#123;<br>    <span class="hljs-comment">/* Enable the UART DMA Tx request */</span><br>    SET_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (huart-&gt;RxState == HAL_UART_STATE_BUSY_RX)<br>  &#123;<br>    <span class="hljs-comment">/* Clear the Overrun flag before resuming the Rx transfer*/</span><br>    __HAL_UART_CLEAR_OREFLAG(huart);<br><br>    <span class="hljs-comment">/* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */</span><br>    SET_BIT(huart-&gt;Instance-&gt;CR1, USART_CR1_PEIE);<br>    SET_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_EIE);<br><br>    <span class="hljs-comment">/* Enable the UART DMA Rx request */</span><br>    SET_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br>  &#125;<br><br>  <span class="hljs-comment">/* Process Unlocked */</span><br>  __HAL_UNLOCK(huart);<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-DMAStop-UART-HandleTypeDef-huart"><a href="#HAL-UART-DMAStop-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_DMAStop(UART_HandleTypeDef *huart)"></a>HAL_UART_DMAStop(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief Stops the DMA Transfer.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_DMAStop</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> dmarequest = <span class="hljs-number">0x00</span>U;<br>  <span class="hljs-comment">/* The Lock is not implemented on this API to allow the user application</span><br><span class="hljs-comment">     to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback():</span><br><span class="hljs-comment">     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated</span><br><span class="hljs-comment">     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()</span><br><span class="hljs-comment">     */</span><br><br>  <span class="hljs-comment">/* Stop UART DMA Tx request if ongoing */</span><br>  dmarequest = HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br>  <span class="hljs-keyword">if</span> ((huart-&gt;gState == HAL_UART_STATE_BUSY_TX) &amp;&amp; dmarequest)<br>  &#123;<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Tx stream */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmatx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      HAL_DMA_Abort(huart-&gt;hdmatx);<br>    &#125;<br>    UART_EndTxTransfer(huart);<br>  &#125;<br><br>  <span class="hljs-comment">/* Stop UART DMA Rx request if ongoing */</span><br>  dmarequest = HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br>  <span class="hljs-keyword">if</span> ((huart-&gt;RxState == HAL_UART_STATE_BUSY_RX) &amp;&amp; dmarequest)<br>  &#123;<br>    CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br><br>    <span class="hljs-comment">/* Abort the UART DMA Rx stream */</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;hdmarx != <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      HAL_DMA_Abort(huart-&gt;hdmarx);<br>    &#125;<br>    UART_EndRxTransfer(huart);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-ErrorCallback-UART-HandleTypeDef-huart"><a href="#HAL-UART-ErrorCallback-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)"></a>HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  UART error callbacks.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">__weak <span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_ErrorCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>  UNUSED(huart);<br>  <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function should not be modified, when the callback is needed,</span><br><span class="hljs-comment">           the HAL_UART_ErrorCallback could be implemented in the user file</span><br><span class="hljs-comment">   */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-GetError-UART-HandleTypeDef-huart"><a href="#HAL-UART-GetError-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_GetError(UART_HandleTypeDef *huart)"></a>HAL_UART_GetError(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Return the UART error code</span><br><span class="hljs-comment">  * @param  huart Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *               the configuration information for the specified UART.</span><br><span class="hljs-comment">  * @retval UART Error Code</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">uint32_t</span> <span class="hljs-title">HAL_UART_GetError</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> huart-&gt;ErrorCode;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-GetState-UART-HandleTypeDef-huart"><a href="#HAL-UART-GetState-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_GetState(UART_HandleTypeDef *huart)"></a>HAL_UART_GetState(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Returns the UART state.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval HAL state</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_UART_StateTypeDef <span class="hljs-title">HAL_UART_GetState</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> temp1 = <span class="hljs-number">0x00</span>U, temp2 = <span class="hljs-number">0x00</span>U;<br>  temp1 = huart-&gt;gState;<br>  temp2 = huart-&gt;RxState;<br><br>  <span class="hljs-keyword">return</span> (HAL_UART_StateTypeDef)(temp1 | temp2);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-Init-UART-HandleTypeDef-huart"><a href="#HAL-UART-Init-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_Init(UART_HandleTypeDef *huart)"></a>HAL_UART_Init(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Initializes the UART mode according to the specified parameters in</span><br><span class="hljs-comment">  *         the UART_InitTypeDef and create the associated handle.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_Init</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Check the UART handle allocation */</span><br>  <span class="hljs-keyword">if</span> (huart == <span class="hljs-literal">NULL</span>)<br>  &#123;<br>    <span class="hljs-keyword">return</span> HAL_ERROR;<br>  &#125;<br><br>  <span class="hljs-comment">/* Check the parameters */</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;Init.HwFlowCtl != UART_HWCONTROL_NONE)<br>  &#123;<br>    <span class="hljs-comment">/* The hardware flow control is available only for USART1, USART2, USART3 and USART6.</span><br><span class="hljs-comment">       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.</span><br><span class="hljs-comment">    */</span><br>    assert_param(IS_UART_HWFLOW_INSTANCE(huart-&gt;Instance));<br>    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart-&gt;Init.HwFlowCtl));<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    assert_param(IS_UART_INSTANCE(huart-&gt;Instance));<br>  &#125;<br>  assert_param(IS_UART_WORD_LENGTH(huart-&gt;Init.WordLength));<br>  assert_param(IS_UART_OVERSAMPLING(huart-&gt;Init.OverSampling));<br><br>  <span class="hljs-keyword">if</span> (huart-&gt;gState == HAL_UART_STATE_RESET)<br>  &#123;<br>    <span class="hljs-comment">/* Allocate lock resource and initialize it */</span><br>    huart-&gt;Lock = HAL_UNLOCKED;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>    UART_InitCallbacksToDefault(huart);<br><br>    <span class="hljs-keyword">if</span> (huart-&gt;MspInitCallback == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>      huart-&gt;MspInitCallback = HAL_UART_MspInit;<br>    &#125;<br><br>    <span class="hljs-comment">/* Init the low level hardware */</span><br>    huart-&gt;MspInitCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>    <span class="hljs-comment">/* Init the low level hardware : GPIO, CLOCK */</span><br>    HAL_UART_MspInit(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* (USE_HAL_UART_REGISTER_CALLBACKS) */</span></span><br>  &#125;<br><br>  huart-&gt;gState = HAL_UART_STATE_BUSY;<br><br>  <span class="hljs-comment">/* Disable the peripheral */</span><br>  __HAL_UART_DISABLE(huart);<br><br>  <span class="hljs-comment">/* Set the UART Communication parameters */</span><br>  UART_SetConfig(huart);<br><br>  <span class="hljs-comment">/* In asynchronous mode, the following bits must be kept cleared:</span><br><span class="hljs-comment">     - LINEN and CLKEN bits in the USART_CR2 register,</span><br><span class="hljs-comment">     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/</span><br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));<br>  CLEAR_BIT(huart-&gt;Instance-&gt;CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));<br><br>  <span class="hljs-comment">/* Enable the peripheral */</span><br>  __HAL_UART_ENABLE(huart);<br><br>  <span class="hljs-comment">/* Initialize the UART state */</span><br>  huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br>  huart-&gt;gState = HAL_UART_STATE_READY;<br>  huart-&gt;RxState = HAL_UART_STATE_READY;<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-IRQHandler-UART-HandleTypeDef-huart"><a href="#HAL-UART-IRQHandler-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_IRQHandler(UART_HandleTypeDef *huart)"></a>HAL_UART_IRQHandler(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  This function handles UART interrupt request.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_IRQHandler</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> isrflags   = READ_REG(huart-&gt;Instance-&gt;SR);<br>  <span class="hljs-keyword">uint32_t</span> cr1its     = READ_REG(huart-&gt;Instance-&gt;CR1);<br>  <span class="hljs-keyword">uint32_t</span> cr3its     = READ_REG(huart-&gt;Instance-&gt;CR3);<br>  <span class="hljs-keyword">uint32_t</span> errorflags = <span class="hljs-number">0x00</span>U;<br>  <span class="hljs-keyword">uint32_t</span> dmarequest = <span class="hljs-number">0x00</span>U;<br><br>  <span class="hljs-comment">/* If no error occurs */</span><br>  errorflags = (isrflags &amp; (<span class="hljs-keyword">uint32_t</span>)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));<br>  <span class="hljs-keyword">if</span> (errorflags == RESET)<br>  &#123;<br>    <span class="hljs-comment">/* UART in mode Receiver -------------------------------------------------*/</span><br>    <span class="hljs-keyword">if</span> (((isrflags &amp; USART_SR_RXNE) != RESET) &amp;&amp; ((cr1its &amp; USART_CR1_RXNEIE) != RESET))<br>    &#123;<br>      UART_Receive_IT(huart);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/* If some errors occur */</span><br>  <span class="hljs-keyword">if</span> ((errorflags != RESET) &amp;&amp; (((cr3its &amp; USART_CR3_EIE) != RESET) || ((cr1its &amp; (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))<br>  &#123;<br>    <span class="hljs-comment">/* UART parity error interrupt occurred ----------------------------------*/</span><br>    <span class="hljs-keyword">if</span> (((isrflags &amp; USART_SR_PE) != RESET) &amp;&amp; ((cr1its &amp; USART_CR1_PEIE) != RESET))<br>    &#123;<br>      huart-&gt;ErrorCode |= HAL_UART_ERROR_PE;<br>    &#125;<br><br>    <span class="hljs-comment">/* UART noise error interrupt occurred -----------------------------------*/</span><br>    <span class="hljs-keyword">if</span> (((isrflags &amp; USART_SR_NE) != RESET) &amp;&amp; ((cr3its &amp; USART_CR3_EIE) != RESET))<br>    &#123;<br>      huart-&gt;ErrorCode |= HAL_UART_ERROR_NE;<br>    &#125;<br><br>    <span class="hljs-comment">/* UART frame error interrupt occurred -----------------------------------*/</span><br>    <span class="hljs-keyword">if</span> (((isrflags &amp; USART_SR_FE) != RESET) &amp;&amp; ((cr3its &amp; USART_CR3_EIE) != RESET))<br>    &#123;<br>      huart-&gt;ErrorCode |= HAL_UART_ERROR_FE;<br>    &#125;<br><br>    <span class="hljs-comment">/* UART Over-Run interrupt occurred --------------------------------------*/</span><br>    <span class="hljs-keyword">if</span> (((isrflags &amp; USART_SR_ORE) != RESET) &amp;&amp; (((cr1its &amp; USART_CR1_RXNEIE) != RESET) || ((cr3its &amp; USART_CR3_EIE) != RESET)))<br>    &#123;<br>      huart-&gt;ErrorCode |= HAL_UART_ERROR_ORE;<br>    &#125;<br><br>    <span class="hljs-comment">/* Call UART Error Call back function if need be --------------------------*/</span><br>    <span class="hljs-keyword">if</span> (huart-&gt;ErrorCode != HAL_UART_ERROR_NONE)<br>    &#123;<br>      <span class="hljs-comment">/* UART in mode Receiver -----------------------------------------------*/</span><br>      <span class="hljs-keyword">if</span> (((isrflags &amp; USART_SR_RXNE) != RESET) &amp;&amp; ((cr1its &amp; USART_CR1_RXNEIE) != RESET))<br>      &#123;<br>        UART_Receive_IT(huart);<br>      &#125;<br><br>      <span class="hljs-comment">/* If Overrun error occurs, or if any error occurs in DMA mode reception,</span><br><span class="hljs-comment">         consider error as blocking */</span><br>      dmarequest = HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br>      <span class="hljs-keyword">if</span> (((huart-&gt;ErrorCode &amp; HAL_UART_ERROR_ORE) != RESET) || dmarequest)<br>      &#123;<br>        <span class="hljs-comment">/* Blocking error : transfer is aborted</span><br><span class="hljs-comment">           Set the UART state ready to be able to start again the process,</span><br><span class="hljs-comment">           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */</span><br>        UART_EndRxTransfer(huart);<br><br>        <span class="hljs-comment">/* Disable the UART DMA Rx request if enabled */</span><br>        <span class="hljs-keyword">if</span> (HAL_IS_BIT_SET(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR))<br>        &#123;<br>          CLEAR_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br><br>          <span class="hljs-comment">/* Abort the UART DMA Rx stream */</span><br>          <span class="hljs-keyword">if</span> (huart-&gt;hdmarx != <span class="hljs-literal">NULL</span>)<br>          &#123;<br>            <span class="hljs-comment">/* Set the UART DMA Abort callback :</span><br><span class="hljs-comment">               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */</span><br>            huart-&gt;hdmarx-&gt;XferAbortCallback = UART_DMAAbortOnError;<br>            <span class="hljs-keyword">if</span> (HAL_DMA_Abort_IT(huart-&gt;hdmarx) != HAL_OK)<br>            &#123;<br>              <span class="hljs-comment">/* Call Directly XferAbortCallback function in case of error */</span><br>              huart-&gt;hdmarx-&gt;XferAbortCallback(huart-&gt;hdmarx);<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            <span class="hljs-comment">/* Call user error callback */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>            <span class="hljs-comment">/*Call registered error callback*/</span><br>            huart-&gt;ErrorCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>            <span class="hljs-comment">/*Call legacy weak error callback*/</span><br>            HAL_UART_ErrorCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          <span class="hljs-comment">/* Call user error callback */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>          <span class="hljs-comment">/*Call registered error callback*/</span><br>          huart-&gt;ErrorCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>          <span class="hljs-comment">/*Call legacy weak error callback*/</span><br>          HAL_UART_ErrorCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-comment">/* Non Blocking error : transfer could go on.</span><br><span class="hljs-comment">           Error is notified to user through user error callback */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>        <span class="hljs-comment">/*Call registered error callback*/</span><br>        huart-&gt;ErrorCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>        <span class="hljs-comment">/*Call legacy weak error callback*/</span><br>        HAL_UART_ErrorCallback(huart);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br><br>        huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>  &#125; <span class="hljs-comment">/* End if some error occurs */</span><br><br>  <span class="hljs-comment">/* UART in mode Transmitter ------------------------------------------------*/</span><br>  <span class="hljs-keyword">if</span> (((isrflags &amp; USART_SR_TXE) != RESET) &amp;&amp; ((cr1its &amp; USART_CR1_TXEIE) != RESET))<br>  &#123;<br>    UART_Transmit_IT(huart);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br><br>  <span class="hljs-comment">/* UART in mode Transmitter end --------------------------------------------*/</span><br>  <span class="hljs-keyword">if</span> (((isrflags &amp; USART_SR_TC) != RESET) &amp;&amp; ((cr1its &amp; USART_CR1_TCIE) != RESET))<br>  &#123;<br>    UART_EndTransmit_IT(huart);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-MspDeInit-UART-HandleTypeDef-uartHandle"><a href="#HAL-UART-MspDeInit-UART-HandleTypeDef-uartHandle" class="headerlink" title="HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)"></a>HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_MspDeInit</span><span class="hljs-params">(UART_HandleTypeDef* uartHandle)</span></span><br><span class="hljs-function"></span>&#123;<br><br>  <span class="hljs-keyword">if</span>(uartHandle-&gt;Instance==USART2)<br>  &#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN USART2_MspDeInit 0 */</span><br><br>  <span class="hljs-comment">/* USER CODE END USART2_MspDeInit 0 */</span><br>    <span class="hljs-comment">/* Peripheral clock disable */</span><br>    __HAL_RCC_USART2_CLK_DISABLE();<br><br>    <span class="hljs-comment">/**USART2 GPIO Configuration</span><br><span class="hljs-comment">    PA2     ------&gt; USART2_TX</span><br><span class="hljs-comment">    PA3     ------&gt; USART2_RX</span><br><span class="hljs-comment">    */</span><br>    HAL_GPIO_DeInit(GPIOA, USART_TX_Pin|USART_RX_Pin);<br><br>    <span class="hljs-comment">/* USART2 interrupt Deinit */</span><br>    HAL_NVIC_DisableIRQ(USART2_IRQn);<br>  <span class="hljs-comment">/* USER CODE BEGIN USART2_MspDeInit 1 */</span><br><br>  <span class="hljs-comment">/* USER CODE END USART2_MspDeInit 1 */</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-Receive-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size-uint32-t-Timeout"><a href="#HAL-UART-Receive-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size-uint32-t-Timeout" class="headerlink" title="HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)"></a>HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Receives an amount of data in blocking mode.</span><br><span class="hljs-comment">  * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M0 = 01),</span><br><span class="hljs-comment">  *         the received data is handled as a set of u16. In this case, Size must indicate the number</span><br><span class="hljs-comment">  *         of u16 available through pData.</span><br><span class="hljs-comment">  * @param  huart Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *               the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @param  pData Pointer to data buffer (u8 or u16 data elements).</span><br><span class="hljs-comment">  * @param  Size  Amount of data elements (u8 or u16) to be received.</span><br><span class="hljs-comment">  * @param  Timeout Timeout duration</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_Receive</span><span class="hljs-params">(UART_HandleTypeDef *huart, <span class="hljs-keyword">uint8_t</span> *pData, <span class="hljs-keyword">uint16_t</span> Size, <span class="hljs-keyword">uint32_t</span> Timeout)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint16_t</span> *tmp;<br>  <span class="hljs-keyword">uint32_t</span> tickstart = <span class="hljs-number">0U</span>;<br><br>  <span class="hljs-comment">/* Check that a Rx process is not already ongoing */</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;RxState == HAL_UART_STATE_READY)<br>  &#123;<br>    <span class="hljs-keyword">if</span> ((pData == <span class="hljs-literal">NULL</span>) || (Size == <span class="hljs-number">0U</span>))<br>    &#123;<br>      <span class="hljs-keyword">return</span>  HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">/* Process Locked */</span><br>    __HAL_LOCK(huart);<br><br>    huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br>    huart-&gt;RxState = HAL_UART_STATE_BUSY_RX;<br><br>    <span class="hljs-comment">/* Init tickstart for timeout managment */</span><br>    tickstart = HAL_GetTick();<br><br>    huart-&gt;RxXferSize = Size;<br>    huart-&gt;RxXferCount = Size;<br><br>    <span class="hljs-comment">/* Process Unlocked */</span><br>    __HAL_UNLOCK(huart);<br><br>    <span class="hljs-comment">/* Check the remain data to be received */</span><br>    <span class="hljs-keyword">while</span> (huart-&gt;RxXferCount &gt; <span class="hljs-number">0U</span>)<br>    &#123;<br>      huart-&gt;RxXferCount--;<br>      <span class="hljs-keyword">if</span> (huart-&gt;Init.WordLength == UART_WORDLENGTH_9B)<br>      &#123;<br>        <span class="hljs-keyword">if</span> (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)<br>        &#123;<br>          <span class="hljs-keyword">return</span> HAL_TIMEOUT;<br>        &#125;<br>        tmp = (<span class="hljs-keyword">uint16_t</span> *) pData;<br>        <span class="hljs-keyword">if</span> (huart-&gt;Init.Parity == UART_PARITY_NONE)<br>        &#123;<br>          *tmp = (<span class="hljs-keyword">uint16_t</span>)(huart-&gt;Instance-&gt;DR &amp; (<span class="hljs-keyword">uint16_t</span>)<span class="hljs-number">0x01FF</span>);<br>          pData += <span class="hljs-number">2U</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          *tmp = (<span class="hljs-keyword">uint16_t</span>)(huart-&gt;Instance-&gt;DR &amp; (<span class="hljs-keyword">uint16_t</span>)<span class="hljs-number">0x00FF</span>);<br>          pData += <span class="hljs-number">1U</span>;<br>        &#125;<br><br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)<br>        &#123;<br>          <span class="hljs-keyword">return</span> HAL_TIMEOUT;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (huart-&gt;Init.Parity == UART_PARITY_NONE)<br>        &#123;<br>          *pData++ = (<span class="hljs-keyword">uint8_t</span>)(huart-&gt;Instance-&gt;DR &amp; (<span class="hljs-keyword">uint8_t</span>)<span class="hljs-number">0x00FF</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          *pData++ = (<span class="hljs-keyword">uint8_t</span>)(huart-&gt;Instance-&gt;DR &amp; (<span class="hljs-keyword">uint8_t</span>)<span class="hljs-number">0x007F</span>);<br>        &#125;<br><br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* At end of Rx process, restore huart-&gt;RxState to Ready */</span><br>    huart-&gt;RxState = HAL_UART_STATE_READY;<br><br>    <span class="hljs-keyword">return</span> HAL_OK;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> HAL_BUSY;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-Receive-DMA-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size"><a href="#HAL-UART-Receive-DMA-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size" class="headerlink" title="HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)"></a>HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Receives an amount of data in DMA mode.</span><br><span class="hljs-comment">  * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M0 = 01),</span><br><span class="hljs-comment">  *         the received data is handled as a set of u16. In this case, Size must indicate the number</span><br><span class="hljs-comment">  *         of u16 available through pData.</span><br><span class="hljs-comment">  * @param  huart Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *               the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @param  pData Pointer to data buffer (u8 or u16 data elements).</span><br><span class="hljs-comment">  * @param  Size  Amount of data elements (u8 or u16) to be received.</span><br><span class="hljs-comment">  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_Receive_DMA</span><span class="hljs-params">(UART_HandleTypeDef *huart, <span class="hljs-keyword">uint8_t</span> *pData, <span class="hljs-keyword">uint16_t</span> Size)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> *tmp;<br><br>  <span class="hljs-comment">/* Check that a Rx process is not already ongoing */</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;RxState == HAL_UART_STATE_READY)<br>  &#123;<br>    <span class="hljs-keyword">if</span> ((pData == <span class="hljs-literal">NULL</span>) || (Size == <span class="hljs-number">0U</span>))<br>    &#123;<br>      <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">/* Process Locked */</span><br>    __HAL_LOCK(huart);<br><br>    huart-&gt;pRxBuffPtr = pData;<br>    huart-&gt;RxXferSize = Size;<br><br>    huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br>    huart-&gt;RxState = HAL_UART_STATE_BUSY_RX;<br><br>    <span class="hljs-comment">/* Set the UART DMA transfer complete callback */</span><br>    huart-&gt;hdmarx-&gt;XferCpltCallback = UART_DMAReceiveCplt;<br><br>    <span class="hljs-comment">/* Set the UART DMA Half transfer complete callback */</span><br>    huart-&gt;hdmarx-&gt;XferHalfCpltCallback = UART_DMARxHalfCplt;<br><br>    <span class="hljs-comment">/* Set the DMA error callback */</span><br>    huart-&gt;hdmarx-&gt;XferErrorCallback = UART_DMAError;<br><br>    <span class="hljs-comment">/* Set the DMA abort callback */</span><br>    huart-&gt;hdmarx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">/* Enable the DMA stream */</span><br>    tmp = (<span class="hljs-keyword">uint32_t</span> *)&amp;pData;<br>    HAL_DMA_Start_IT(huart-&gt;hdmarx, (<span class="hljs-keyword">uint32_t</span>)&amp;huart-&gt;Instance-&gt;DR, *(<span class="hljs-keyword">uint32_t</span> *)tmp, Size);<br><br>    <span class="hljs-comment">/* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */</span><br>    __HAL_UART_CLEAR_OREFLAG(huart);<br><br>    <span class="hljs-comment">/* Process Unlocked */</span><br>    __HAL_UNLOCK(huart);<br><br>    <span class="hljs-comment">/* Enable the UART Parity Error Interrupt */</span><br>    SET_BIT(huart-&gt;Instance-&gt;CR1, USART_CR1_PEIE);<br><br>    <span class="hljs-comment">/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */</span><br>    SET_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_EIE);<br><br>    <span class="hljs-comment">/* Enable the DMA transfer for the receiver request by setting the DMAR bit</span><br><span class="hljs-comment">    in the UART CR3 register */</span><br>    SET_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAR);<br><br>    <span class="hljs-keyword">return</span> HAL_OK;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> HAL_BUSY;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-Receive-IT-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size"><a href="#HAL-UART-Receive-IT-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size" class="headerlink" title="HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)"></a>HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Receives an amount of data in non blocking mode.</span><br><span class="hljs-comment">  * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M0 = 01),</span><br><span class="hljs-comment">  *         the received data is handled as a set of u16. In this case, Size must indicate the number</span><br><span class="hljs-comment">  *         of u16 available through pData.</span><br><span class="hljs-comment">  * @param  huart Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *               the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @param  pData Pointer to data buffer (u8 or u16 data elements).</span><br><span class="hljs-comment">  * @param  Size  Amount of data elements (u8 or u16) to be received.</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_Receive_IT</span><span class="hljs-params">(UART_HandleTypeDef *huart, <span class="hljs-keyword">uint8_t</span> *pData, <span class="hljs-keyword">uint16_t</span> Size)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Check that a Rx process is not already ongoing */</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;RxState == HAL_UART_STATE_READY)<br>  &#123;<br>    <span class="hljs-keyword">if</span> ((pData == <span class="hljs-literal">NULL</span>) || (Size == <span class="hljs-number">0U</span>))<br>    &#123;<br>      <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">/* Process Locked */</span><br>    __HAL_LOCK(huart);<br><br>    huart-&gt;pRxBuffPtr = pData;<br>    huart-&gt;RxXferSize = Size;<br>    huart-&gt;RxXferCount = Size;<br><br>    huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br>    huart-&gt;RxState = HAL_UART_STATE_BUSY_RX;<br><br>    <span class="hljs-comment">/* Process Unlocked */</span><br>    __HAL_UNLOCK(huart);<br><br>    <span class="hljs-comment">/* Enable the UART Parity Error Interrupt */</span><br>    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);<br><br>    <span class="hljs-comment">/* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */</span><br>    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);<br><br>    <span class="hljs-comment">/* Enable the UART Data Register not empty Interrupt */</span><br>    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);<br><br>    <span class="hljs-keyword">return</span> HAL_OK;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> HAL_BUSY;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-RxCpltCallback-UART-HandleTypeDef-huart"><a href="#HAL-UART-RxCpltCallback-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)"></a>HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Rx Transfer completed callbacks.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">__weak <span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_RxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>  UNUSED(huart);<br>  <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function should not be modified, when the callback is needed,</span><br><span class="hljs-comment">           the HAL_UART_RxCpltCallback could be implemented in the user file</span><br><span class="hljs-comment">   */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-Transmit-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size-uint32-t-Timeout"><a href="#HAL-UART-Transmit-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size-uint32-t-Timeout" class="headerlink" title="HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)"></a>HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Sends an amount of data in blocking mode.</span><br><span class="hljs-comment">  * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M0 = 01),</span><br><span class="hljs-comment">  *         the sent data is handled as a set of u16. In this case, Size must indicate the number</span><br><span class="hljs-comment">  *         of u16 provided through pData.</span><br><span class="hljs-comment">  * @param  huart Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *               the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @param  pData Pointer to data buffer (u8 or u16 data elements).</span><br><span class="hljs-comment">  * @param  Size  Amount of data elements (u8 or u16) to be sent</span><br><span class="hljs-comment">  * @param  Timeout Timeout duration</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_Transmit</span><span class="hljs-params">(UART_HandleTypeDef *huart, <span class="hljs-keyword">uint8_t</span> *pData, <span class="hljs-keyword">uint16_t</span> Size, <span class="hljs-keyword">uint32_t</span> Timeout)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint16_t</span> *tmp;<br>  <span class="hljs-keyword">uint32_t</span> tickstart = <span class="hljs-number">0U</span>;<br><br>  <span class="hljs-comment">/* Check that a Tx process is not already ongoing */</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;gState == HAL_UART_STATE_READY)<br>  &#123;<br>    <span class="hljs-keyword">if</span> ((pData == <span class="hljs-literal">NULL</span>) || (Size == <span class="hljs-number">0U</span>))<br>    &#123;<br>      <span class="hljs-keyword">return</span>  HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">/* Process Locked */</span><br>    __HAL_LOCK(huart);<br><br>    huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br>    huart-&gt;gState = HAL_UART_STATE_BUSY_TX;<br><br>    <span class="hljs-comment">/* Init tickstart for timeout managment */</span><br>    tickstart = HAL_GetTick();<br><br>    huart-&gt;TxXferSize = Size;<br>    huart-&gt;TxXferCount = Size;<br><br>    <span class="hljs-comment">/* Process Unlocked */</span><br>    __HAL_UNLOCK(huart);<br><br>    <span class="hljs-keyword">while</span> (huart-&gt;TxXferCount &gt; <span class="hljs-number">0U</span>)<br>    &#123;<br>      huart-&gt;TxXferCount--;<br>      <span class="hljs-keyword">if</span> (huart-&gt;Init.WordLength == UART_WORDLENGTH_9B)<br>      &#123;<br>        <span class="hljs-keyword">if</span> (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)<br>        &#123;<br>          <span class="hljs-keyword">return</span> HAL_TIMEOUT;<br>        &#125;<br>        tmp = (<span class="hljs-keyword">uint16_t</span> *) pData;<br>        huart-&gt;Instance-&gt;DR = (*tmp &amp; (<span class="hljs-keyword">uint16_t</span>)<span class="hljs-number">0x01FF</span>);<br>        <span class="hljs-keyword">if</span> (huart-&gt;Init.Parity == UART_PARITY_NONE)<br>        &#123;<br>          pData += <span class="hljs-number">2U</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          pData += <span class="hljs-number">1U</span>;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)<br>        &#123;<br>          <span class="hljs-keyword">return</span> HAL_TIMEOUT;<br>        &#125;<br>        huart-&gt;Instance-&gt;DR = (*pData++ &amp; (<span class="hljs-keyword">uint8_t</span>)<span class="hljs-number">0xFF</span>);<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)<br>    &#123;<br>      <span class="hljs-keyword">return</span> HAL_TIMEOUT;<br>    &#125;<br><br>    <span class="hljs-comment">/* At end of Tx process, restore huart-&gt;gState to Ready */</span><br>    huart-&gt;gState = HAL_UART_STATE_READY;<br><br>    <span class="hljs-keyword">return</span> HAL_OK;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> HAL_BUSY;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-Transmit-DMA-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size"><a href="#HAL-UART-Transmit-DMA-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size" class="headerlink" title="HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)"></a>HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Sends an amount of data in DMA mode.</span><br><span class="hljs-comment">  * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M0 = 01),</span><br><span class="hljs-comment">  *         the sent data is handled as a set of u16. In this case, Size must indicate the number</span><br><span class="hljs-comment">  *         of u16 provided through pData.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @param  pData Pointer to data buffer (u8 or u16 data elements).</span><br><span class="hljs-comment">  * @param  Size  Amount of data elements (u8 or u16) to be sent</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_Transmit_DMA</span><span class="hljs-params">(UART_HandleTypeDef *huart, <span class="hljs-keyword">uint8_t</span> *pData, <span class="hljs-keyword">uint16_t</span> Size)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> *tmp;<br><br>  <span class="hljs-comment">/* Check that a Tx process is not already ongoing */</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;gState == HAL_UART_STATE_READY)<br>  &#123;<br>    <span class="hljs-keyword">if</span> ((pData == <span class="hljs-literal">NULL</span>) || (Size == <span class="hljs-number">0U</span>))<br>    &#123;<br>      <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">/* Process Locked */</span><br>    __HAL_LOCK(huart);<br><br>    huart-&gt;pTxBuffPtr = pData;<br>    huart-&gt;TxXferSize = Size;<br>    huart-&gt;TxXferCount = Size;<br><br>    huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br>    huart-&gt;gState = HAL_UART_STATE_BUSY_TX;<br><br>    <span class="hljs-comment">/* Set the UART DMA transfer complete callback */</span><br>    huart-&gt;hdmatx-&gt;XferCpltCallback = UART_DMATransmitCplt;<br><br>    <span class="hljs-comment">/* Set the UART DMA Half transfer complete callback */</span><br>    huart-&gt;hdmatx-&gt;XferHalfCpltCallback = UART_DMATxHalfCplt;<br><br>    <span class="hljs-comment">/* Set the DMA error callback */</span><br>    huart-&gt;hdmatx-&gt;XferErrorCallback = UART_DMAError;<br><br>    <span class="hljs-comment">/* Set the DMA abort callback */</span><br>    huart-&gt;hdmatx-&gt;XferAbortCallback = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">/* Enable the UART transmit DMA stream */</span><br>    tmp = (<span class="hljs-keyword">uint32_t</span> *)&amp;pData;<br>    HAL_DMA_Start_IT(huart-&gt;hdmatx, *(<span class="hljs-keyword">uint32_t</span> *)tmp, (<span class="hljs-keyword">uint32_t</span>)&amp;huart-&gt;Instance-&gt;DR, Size);<br><br>    <span class="hljs-comment">/* Clear the TC flag in the SR register by writing 0 to it */</span><br>    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);<br><br>    <span class="hljs-comment">/* Process Unlocked */</span><br>    __HAL_UNLOCK(huart);<br><br>    <span class="hljs-comment">/* Enable the DMA transfer for transmit request by setting the DMAT bit</span><br><span class="hljs-comment">       in the UART CR3 register */</span><br>    SET_BIT(huart-&gt;Instance-&gt;CR3, USART_CR3_DMAT);<br><br>    <span class="hljs-keyword">return</span> HAL_OK;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> HAL_BUSY;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-Transmit-IT-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size"><a href="#HAL-UART-Transmit-IT-UART-HandleTypeDef-huart-uint8-t-pData-uint16-t-Size" class="headerlink" title="HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)"></a>HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Sends an amount of data in non blocking mode.</span><br><span class="hljs-comment">  * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-M0 = 01),</span><br><span class="hljs-comment">  *         the sent data is handled as a set of u16. In this case, Size must indicate the number</span><br><span class="hljs-comment">  *         of u16 provided through pData.</span><br><span class="hljs-comment">  * @param  huart Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *               the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @param  pData Pointer to data buffer (u8 or u16 data elements).</span><br><span class="hljs-comment">  * @param  Size  Amount of data elements (u8 or u16) to be sent</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_UART_Transmit_IT</span><span class="hljs-params">(UART_HandleTypeDef *huart, <span class="hljs-keyword">uint8_t</span> *pData, <span class="hljs-keyword">uint16_t</span> Size)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Check that a Tx process is not already ongoing */</span><br>  <span class="hljs-keyword">if</span> (huart-&gt;gState == HAL_UART_STATE_READY)<br>  &#123;<br>    <span class="hljs-keyword">if</span> ((pData == <span class="hljs-literal">NULL</span>) || (Size == <span class="hljs-number">0U</span>))<br>    &#123;<br>      <span class="hljs-keyword">return</span> HAL_ERROR;<br>    &#125;<br><br>    <span class="hljs-comment">/* Process Locked */</span><br>    __HAL_LOCK(huart);<br><br>    huart-&gt;pTxBuffPtr = pData;<br>    huart-&gt;TxXferSize = Size;<br>    huart-&gt;TxXferCount = Size;<br><br>    huart-&gt;ErrorCode = HAL_UART_ERROR_NONE;<br>    huart-&gt;gState = HAL_UART_STATE_BUSY_TX;<br><br>    <span class="hljs-comment">/* Process Unlocked */</span><br>    __HAL_UNLOCK(huart);<br><br>    <span class="hljs-comment">/* Enable the UART Transmit data register empty Interrupt */</span><br>    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);<br><br>    <span class="hljs-keyword">return</span> HAL_OK;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-keyword">return</span> HAL_BUSY;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-TxCpltCallback-UART-HandleTypeDef-huart"><a href="#HAL-UART-TxCpltCallback-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)"></a>HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Tx Transfer completed callbacks.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">__weak <span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_TxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>  UNUSED(huart);<br>  <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function should not be modified, when the callback is needed,</span><br><span class="hljs-comment">           the HAL_UART_TxCpltCallback could be implemented in the user file</span><br><span class="hljs-comment">   */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-UART-TxHalfCpltCallback-UART-HandleTypeDef-huart"><a href="#HAL-UART-TxHalfCpltCallback-UART-HandleTypeDef-huart" class="headerlink" title="HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)"></a>HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Tx Half Transfer completed callbacks.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">__weak <span class="hljs-keyword">void</span> <span class="hljs-title">HAL_UART_TxHalfCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>  UNUSED(huart);<br>  <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function should not be modified, when the callback is needed,</span><br><span class="hljs-comment">           the HAL_UART_TxHalfCpltCallback could be implemented in the user file</span><br><span class="hljs-comment">   */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="HAL-HalfDuplex-EnableTransmitter-UART-HandleTypeDef-huart"><a href="#HAL-HalfDuplex-EnableTransmitter-UART-HandleTypeDef-huart" class="headerlink" title="HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)"></a>HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Enables the UART transmitter and disables the UART receiver.</span><br><span class="hljs-comment">  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains</span><br><span class="hljs-comment">  *                the configuration information for the specified UART module.</span><br><span class="hljs-comment">  * @retval HAL status</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function">HAL_StatusTypeDef <span class="hljs-title">HAL_HalfDuplex_EnableTransmitter</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">uint32_t</span> tmpreg = <span class="hljs-number">0x00</span>U;<br><br>  <span class="hljs-comment">/* Process Locked */</span><br>  __HAL_LOCK(huart);<br><br>  huart-&gt;gState = HAL_UART_STATE_BUSY;<br><br>  <span class="hljs-comment">/*-------------------------- USART CR1 Configuration -----------------------*/</span><br>  tmpreg = huart-&gt;Instance-&gt;CR1;<br><br>  <span class="hljs-comment">/* Clear TE and RE bits */</span><br>  tmpreg &amp;= (<span class="hljs-keyword">uint32_t</span>)~((<span class="hljs-keyword">uint32_t</span>)(USART_CR1_TE | USART_CR1_RE));<br><br>  <span class="hljs-comment">/* Enable the USART&#x27;s transmit interface by setting the TE bit in the USART CR1 register */</span><br>  tmpreg |= (<span class="hljs-keyword">uint32_t</span>)USART_CR1_TE;<br><br>  <span class="hljs-comment">/* Write to USART CR1 */</span><br>  WRITE_REG(huart-&gt;Instance-&gt;CR1, (<span class="hljs-keyword">uint32_t</span>)tmpreg);<br><br>  huart-&gt;gState = HAL_UART_STATE_READY;<br><br>  <span class="hljs-comment">/* Process Unlocked */</span><br>  __HAL_UNLOCK(huart);<br><br>  <span class="hljs-keyword">return</span> HAL_OK;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="宏定义-Define"><a href="#宏定义-Define" class="headerlink" title="宏定义 Define"></a>宏定义 Define</h2><h3 id="串口错误代码-UART-Error-Code"><a href="#串口错误代码-UART-Error-Code" class="headerlink" title="串口错误代码 (UART Error Code)"></a>串口错误代码 (UART Error Code)</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HAL_UART_ERROR_NONE              0x00000000U   <span class="hljs-comment">/*!&lt; No error | 没有错误           */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HAL_UART_ERROR_PE                0x00000001U   <span class="hljs-comment">/*!&lt; Parity error | 奇偶校验错误       */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HAL_UART_ERROR_NE                0x00000002U   <span class="hljs-comment">/*!&lt; Noise error | 噪声错误标志        */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HAL_UART_ERROR_FE                0x00000004U   <span class="hljs-comment">/*!&lt; Frame error | 帧错误        */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HAL_UART_ERROR_ORE               0x00000008U   <span class="hljs-comment">/*!&lt; Overrun error | 溢出错误      */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HAL_UART_ERROR_DMA               0x00000010U   <span class="hljs-comment">/*!&lt; DMA transfer error | DMA传输错误   */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span>  HAL_UART_ERROR_INVALID_CALLBACK 0x00000020U   <span class="hljs-comment">/*!&lt; Invalid Callback error  */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br></code></pre></div></td></tr></table></figure><h3 id="串口使能与禁能"><a href="#串口使能与禁能" class="headerlink" title="串口使能与禁能"></a>串口使能与禁能</h3><ol><li>__HAL_UART_DISABLE</li><li>__HAL_UART_DISABLE_IT</li><li>__HAL_UART_ENABLE</li><li>__HAL_UART_ENABLE_IT</li></ol><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_DISABLE(__HANDLE__)              ((__HANDLE__)-&gt;Instance-&gt;CR1 &amp;=  ~USART_CR1_UE)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_ENABLE(__HANDLE__)               ((__HANDLE__)-&gt;Instance-&gt;CR1 |=  USART_CR1_UE)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_DISABLE_IT(__HANDLE__, __INTERRUPT__)  ((((__INTERRUPT__) &gt;&gt; 28U) == UART_CR1_REG_INDEX)? ((__HANDLE__)-&gt;Instance-&gt;CR1 &amp;= ~((__INTERRUPT__) &amp; UART_IT_MASK)): \</span><br>                                                           (((__INTERRUPT__) &gt;&gt; <span class="hljs-number">28U</span>) == UART_CR2_REG_INDEX)? ((__HANDLE__)-&gt;Instance-&gt;CR2 &amp;= ~((__INTERRUPT__) &amp; UART_IT_MASK)): \<br>                                                           ((__HANDLE__)-&gt;Instance-&gt;CR3 &amp;= ~ ((__INTERRUPT__) &amp; UART_IT_MASK)))<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_ENABLE_IT(__HANDLE__, __INTERRUPT__)   ((((__INTERRUPT__) &gt;&gt; 28U) == UART_CR1_REG_INDEX)? ((__HANDLE__)-&gt;Instance-&gt;CR1 |= ((__INTERRUPT__) &amp; UART_IT_MASK)): \</span><br>                                                           (((__INTERRUPT__) &gt;&gt; <span class="hljs-number">28U</span>) == UART_CR2_REG_INDEX)? ((__HANDLE__)-&gt;Instance-&gt;CR2 |= ((__INTERRUPT__) &amp; UART_IT_MASK)): \<br>                                                           ((__HANDLE__)-&gt;Instance-&gt;CR3 |= ((__INTERRUPT__) &amp; UART_IT_MASK)))<br></code></pre></div></td></tr></table></figure><h3 id="刷新串口数据寄存器"><a href="#刷新串口数据寄存器" class="headerlink" title="刷新串口数据寄存器"></a>刷新串口数据寄存器</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_FLUSH_DRREGISTER(__HANDLE__) ((__HANDLE__)-&gt;Instance-&gt;DR)</span><br></code></pre></div></td></tr></table></figure><h3 id="获取-串口状态标志"><a href="#获取-串口状态标志" class="headerlink" title="获取 串口状态标志"></a>获取 串口状态标志</h3><p>状态寄存器 (<code>USART_SR</code>)<br><code>SR</code>: 是英文 <code>State Register</code> 的缩写</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_GET_FLAG(__HANDLE__, __FLAG__) (((__HANDLE__)-&gt;Instance-&gt;SR &amp; (__FLAG__)) == (__FLAG__))</span><br><br></code></pre></div></td></tr></table></figure><p>__HAL_UART_GET_FLAG(<strong>HANDLE</strong>, <strong>FLAG</strong>)</p><p>返回值为：<code>True</code> 或 <code>False</code></p><h3 id="清除标志"><a href="#清除标志" class="headerlink" title="清除标志"></a>清除标志</h3><ol><li>__HAL_UART_CLEAR_FEFLAG</li><li>__HAL_UART_CLEAR_IDLEFLAG</li><li>__HAL_UART_CLEAR_NEFLAG</li><li>__HAL_UART_CLEAR_OREFLAG</li><li>__HAL_UART_CLEAR_PEFLAG</li><li>__HAL_UART_CLEAR_FLAG</li></ol><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_CLEAR_FEFLAG(__HANDLE__) __HAL_UART_CLEAR_PEFLAG(__HANDLE__)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_CLEAR_IDLEFLAG(__HANDLE__) __HAL_UART_CLEAR_PEFLAG(__HANDLE__)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_CLEAR_NEFLAG(__HANDLE__) __HAL_UART_CLEAR_PEFLAG(__HANDLE__)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_CLEAR_OREFLAG(__HANDLE__) __HAL_UART_CLEAR_PEFLAG(__HANDLE__)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_CLEAR_PEFLAG(__HANDLE__)     \</span><br>  <span class="hljs-keyword">do</span>&#123;                                           \<br>    __IO <span class="hljs-keyword">uint32_t</span> tmpreg = <span class="hljs-number">0x00</span>U;               \<br>    tmpreg = (__HANDLE__)-&gt;Instance-&gt;SR;        \<br>    tmpreg = (__HANDLE__)-&gt;Instance-&gt;DR;        \<br>    UNUSED(tmpreg);                             \<br>  &#125; <span class="hljs-keyword">while</span>(<span class="hljs-number">0U</span>)<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_CLEAR_FLAG(__HANDLE__, __FLAG__) ((__HANDLE__)-&gt;Instance-&gt;SR = ~(__FLAG__))</span><br></code></pre></div></td></tr></table></figure><h3 id="模块选择"><a href="#模块选择" class="headerlink" title="模块选择"></a>模块选择</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HAL_UART_MODULE_ENABLED</span><br></code></pre></div></td></tr></table></figure><h3 id="检查指定的UART中断源是否启用。"><a href="#检查指定的UART中断源是否启用。" class="headerlink" title="检查指定的UART中断源是否启用。"></a>检查指定的UART中断源是否启用。</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> __HAL_UART_GET_IT_SOURCE(__HANDLE__, __IT__) (((((__IT__) &gt;&gt; 28U) == UART_CR1_REG_INDEX)? (__HANDLE__)-&gt;Instance-&gt;CR1:(((((uint32_t)(__IT__)) &gt;&gt; 28U) == UART_CR2_REG_INDEX)? \</span><br>                                                      (__HANDLE__)-&gt;Instance-&gt;CR2 : (__HANDLE__)-&gt;Instance-&gt;CR3)) &amp; (((<span class="hljs-keyword">uint32_t</span>)(__IT__)) &amp; UART_IT_MASK))<br></code></pre></div></td></tr></table></figure><p>返回值：<code>True</code> 或 <code>False</code></p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="HAL-UART-StateTypeDef"><a href="#HAL-UART-StateTypeDef" class="headerlink" title="HAL_UART_StateTypeDef"></a>HAL_UART_StateTypeDef</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>  HAL_UART_STATE_RESET             = <span class="hljs-number">0x00</span>U,    <span class="hljs-comment">/*!&lt; Peripheral is not yet Initialized</span><br><span class="hljs-comment">                                                   Value is allowed for gState and RxState */</span><br>  HAL_UART_STATE_READY             = <span class="hljs-number">0x20</span>U,    <span class="hljs-comment">/*!&lt; Peripheral Initialized and ready for use</span><br><span class="hljs-comment">                                                   Value is allowed for gState and RxState */</span><br>  HAL_UART_STATE_BUSY              = <span class="hljs-number">0x24</span>U,    <span class="hljs-comment">/*!&lt; an internal process is ongoing</span><br><span class="hljs-comment">                                                   Value is allowed for gState only */</span><br>  HAL_UART_STATE_BUSY_TX           = <span class="hljs-number">0x21</span>U,    <span class="hljs-comment">/*!&lt; Data Transmission process is ongoing</span><br><span class="hljs-comment">                                                   Value is allowed for gState only */</span><br>  HAL_UART_STATE_BUSY_RX           = <span class="hljs-number">0x22</span>U,    <span class="hljs-comment">/*!&lt; Data Reception process is ongoing</span><br><span class="hljs-comment">                                                   Value is allowed for RxState only */</span><br>  HAL_UART_STATE_BUSY_TX_RX        = <span class="hljs-number">0x23</span>U,    <span class="hljs-comment">/*!&lt; Data Transmission and Reception process is ongoing</span><br><span class="hljs-comment">                                                   Not to be used for neither gState nor RxState.</span><br><span class="hljs-comment">                                                   Value is result of combination (Or) between gState and RxState values */</span><br>  HAL_UART_STATE_TIMEOUT           = <span class="hljs-number">0xA0</span>U,    <span class="hljs-comment">/*!&lt; Timeout state</span><br><span class="hljs-comment">                                                   Value is allowed for gState only */</span><br>  HAL_UART_STATE_ERROR             = <span class="hljs-number">0xE0</span>U     <span class="hljs-comment">/*!&lt; Error</span><br><span class="hljs-comment">                                                   Value is allowed for gState only */</span><br>&#125; HAL_UART_StateTypeDef;<br><br></code></pre></div></td></tr></table></figure><h3 id="HAL-LockTypeDef"><a href="#HAL-LockTypeDef" class="headerlink" title="HAL_LockTypeDef"></a>HAL_LockTypeDef</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> </span><br><span class="hljs-class">&#123;</span><br>  HAL_UNLOCKED = <span class="hljs-number">0x00</span>U,<br>  HAL_LOCKED   = <span class="hljs-number">0x01</span>U  <br>&#125; HAL_LockTypeDef;<br></code></pre></div></td></tr></table></figure><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h3 id="UART-HandleTypeDef"><a href="#UART-HandleTypeDef" class="headerlink" title="UART_HandleTypeDef"></a>UART_HandleTypeDef</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">UART_HandleTypeDef</span></span><br><span class="hljs-class">&#123;</span><br>  USART_TypeDef                 *Instance;        <span class="hljs-comment">/*!&lt; UART registers base address        */</span><br><br>  UART_InitTypeDef              Init;             <span class="hljs-comment">/*!&lt; UART communication parameters      */</span><br><br>  <span class="hljs-keyword">uint8_t</span>                       *pTxBuffPtr;      <span class="hljs-comment">/*!&lt; Pointer to UART Tx transfer Buffer */</span><br><br>  <span class="hljs-keyword">uint16_t</span>                      TxXferSize;       <span class="hljs-comment">/*!&lt; UART Tx Transfer size              */</span><br><br>  __IO <span class="hljs-keyword">uint16_t</span>                 TxXferCount;      <span class="hljs-comment">/*!&lt; UART Tx Transfer Counter           */</span><br><br>  <span class="hljs-keyword">uint8_t</span>                       *pRxBuffPtr;      <span class="hljs-comment">/*!&lt; Pointer to UART Rx transfer Buffer */</span><br><br>  <span class="hljs-keyword">uint16_t</span>                      RxXferSize;       <span class="hljs-comment">/*!&lt; UART Rx Transfer size              */</span><br><br>  __IO <span class="hljs-keyword">uint16_t</span>                 RxXferCount;      <span class="hljs-comment">/*!&lt; UART Rx Transfer Counter           */</span><br><br>  DMA_HandleTypeDef             *hdmatx;          <span class="hljs-comment">/*!&lt; UART Tx DMA Handle parameters      */</span><br><br>  DMA_HandleTypeDef             *hdmarx;          <span class="hljs-comment">/*!&lt; UART Rx DMA Handle parameters      */</span><br><br>  HAL_LockTypeDef               Lock;             <span class="hljs-comment">/*!&lt; Locking object                     */</span><br><br>  __IO HAL_UART_StateTypeDef    gState;           <span class="hljs-comment">/*!&lt; UART state information related to global Handle management</span><br><span class="hljs-comment">                                                       and also related to Tx operations.</span><br><span class="hljs-comment">                                                       This parameter can be a value of @ref HAL_UART_StateTypeDef */</span><br><br>  __IO HAL_UART_StateTypeDef    RxState;          <span class="hljs-comment">/*!&lt; UART state information related to Rx operations.</span><br><span class="hljs-comment">                                                       This parameter can be a value of @ref HAL_UART_StateTypeDef */</span><br><br>  __IO <span class="hljs-keyword">uint32_t</span>                 ErrorCode;        <span class="hljs-comment">/*!&lt; UART Error code                    */</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> (USE_HAL_UART_REGISTER_CALLBACKS == 1)</span><br>  <span class="hljs-keyword">void</span> (* TxHalfCpltCallback)(struct __UART_HandleTypeDef *huart);        <span class="hljs-comment">/*!&lt; UART Tx Half Complete Callback        */</span><br>  <span class="hljs-keyword">void</span> (* TxCpltCallback)(struct __UART_HandleTypeDef *huart);            <span class="hljs-comment">/*!&lt; UART Tx Complete Callback             */</span><br>  <span class="hljs-keyword">void</span> (* RxHalfCpltCallback)(struct __UART_HandleTypeDef *huart);        <span class="hljs-comment">/*!&lt; UART Rx Half Complete Callback        */</span><br>  <span class="hljs-keyword">void</span> (* RxCpltCallback)(struct __UART_HandleTypeDef *huart);            <span class="hljs-comment">/*!&lt; UART Rx Complete Callback             */</span><br>  <span class="hljs-keyword">void</span> (* ErrorCallback)(struct __UART_HandleTypeDef *huart);             <span class="hljs-comment">/*!&lt; UART Error Callback                   */</span><br>  <span class="hljs-keyword">void</span> (* AbortCpltCallback)(struct __UART_HandleTypeDef *huart);         <span class="hljs-comment">/*!&lt; UART Abort Complete Callback          */</span><br>  <span class="hljs-keyword">void</span> (* AbortTransmitCpltCallback)(struct __UART_HandleTypeDef *huart); <span class="hljs-comment">/*!&lt; UART Abort Transmit Complete Callback */</span><br>  <span class="hljs-keyword">void</span> (* AbortReceiveCpltCallback)(struct __UART_HandleTypeDef *huart);  <span class="hljs-comment">/*!&lt; UART Abort Receive Complete Callback  */</span><br>  <span class="hljs-keyword">void</span> (* WakeupCallback)(struct __UART_HandleTypeDef *huart);            <span class="hljs-comment">/*!&lt; UART Wakeup Callback                  */</span><br><br>  <span class="hljs-keyword">void</span> (* MspInitCallback)(struct __UART_HandleTypeDef *huart);           <span class="hljs-comment">/*!&lt; UART Msp Init callback                */</span><br>  <span class="hljs-keyword">void</span> (* MspDeInitCallback)(struct __UART_HandleTypeDef *huart);         <span class="hljs-comment">/*!&lt; UART Msp DeInit callback              */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span>  <span class="hljs-comment">/* USE_HAL_UART_REGISTER_CALLBACKS */</span></span><br><br>&#125; UART_HandleTypeDef;<br></code></pre></div></td></tr></table></figure><h3 id="USART-TypeDef"><a href="#USART-TypeDef" class="headerlink" title="USART_TypeDef"></a>USART_TypeDef</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  __IO <span class="hljs-keyword">uint32_t</span> SR;         <span class="hljs-comment">/*!&lt; USART Status register,                   Address offset: 0x00 */</span><br>  __IO <span class="hljs-keyword">uint32_t</span> DR;         <span class="hljs-comment">/*!&lt; USART Data register,                     Address offset: 0x04 */</span><br>  __IO <span class="hljs-keyword">uint32_t</span> BRR;        <span class="hljs-comment">/*!&lt; USART Baud rate register,                Address offset: 0x08 */</span><br>  __IO <span class="hljs-keyword">uint32_t</span> CR1;        <span class="hljs-comment">/*!&lt; USART Control register 1,                Address offset: 0x0C */</span><br>  __IO <span class="hljs-keyword">uint32_t</span> CR2;        <span class="hljs-comment">/*!&lt; USART Control register 2,                Address offset: 0x10 */</span><br>  __IO <span class="hljs-keyword">uint32_t</span> CR3;        <span class="hljs-comment">/*!&lt; USART Control register 3,                Address offset: 0x14 */</span><br>  __IO <span class="hljs-keyword">uint32_t</span> GTPR;       <span class="hljs-comment">/*!&lt; USART Guard time and prescaler register, Address offset: 0x18 */</span><br>&#125; USART_TypeDef;<br></code></pre></div></td></tr></table></figure><h3 id="UART-InitTypeDef"><a href="#UART-InitTypeDef" class="headerlink" title="UART_InitTypeDef"></a>UART_InitTypeDef</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">uint32_t</span> BaudRate;                  <span class="hljs-comment">/*!&lt; This member configures the UART communication baud rate.</span><br><span class="hljs-comment">                                           The baud rate is computed using the following formula:</span><br><span class="hljs-comment">                                           - IntegerDivider = ((PCLKx) / (8 * (OVR8+1) * (huart-&gt;Init.BaudRate)))</span><br><span class="hljs-comment">                                           - FractionalDivider = ((IntegerDivider - ((uint32_t) IntegerDivider)) * 8 * (OVR8+1)) + 0.5</span><br><span class="hljs-comment">                                           Where OVR8 is the &quot;oversampling by 8 mode&quot; configuration bit in the CR1 register. */</span><br><br>  <span class="hljs-keyword">uint32_t</span> WordLength;                <span class="hljs-comment">/*!&lt; Specifies the number of data bits transmitted or received in a frame.</span><br><span class="hljs-comment">                                           This parameter can be a value of @ref UART_Word_Length */</span><br><br>  <span class="hljs-keyword">uint32_t</span> StopBits;                  <span class="hljs-comment">/*!&lt; Specifies the number of stop bits transmitted.</span><br><span class="hljs-comment">                                           This parameter can be a value of @ref UART_Stop_Bits */</span><br><br>  <span class="hljs-keyword">uint32_t</span> Parity;                    <span class="hljs-comment">/*!&lt; Specifies the parity mode.</span><br><span class="hljs-comment">                                           This parameter can be a value of @ref UART_Parity</span><br><span class="hljs-comment">                                           @note When parity is enabled, the computed parity is inserted</span><br><span class="hljs-comment">                                                 at the MSB position of the transmitted data (9th bit when</span><br><span class="hljs-comment">                                                 the word length is set to 9 data bits; 8th bit when the</span><br><span class="hljs-comment">                                                 word length is set to 8 data bits). */</span><br><br>  <span class="hljs-keyword">uint32_t</span> Mode;                      <span class="hljs-comment">/*!&lt; Specifies whether the Receive or Transmit mode is enabled or disabled.</span><br><span class="hljs-comment">                                           This parameter can be a value of @ref UART_Mode */</span><br><br>  <span class="hljs-keyword">uint32_t</span> HwFlowCtl;                 <span class="hljs-comment">/*!&lt; Specifies whether the hardware flow control mode is enabled or disabled.</span><br><span class="hljs-comment">                                           This parameter can be a value of @ref UART_Hardware_Flow_Control */</span><br><br>  <span class="hljs-keyword">uint32_t</span> OverSampling;              <span class="hljs-comment">/*!&lt; Specifies whether the Over sampling 8 is enabled or disabled, to achieve higher speed (up to fPCLK/8).</span><br><span class="hljs-comment">                                           This parameter can be a value of @ref UART_Over_Sampling */</span><br>&#125; UART_InitTypeDef;<br></code></pre></div></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">DMA_HandleTypeDef</span></span><br><span class="hljs-class">&#123;</span><br>  DMA_Stream_TypeDef         *Instance;                                                        <span class="hljs-comment">/*!&lt; Register base address                  */</span><br><br>  DMA_InitTypeDef            Init;                                                             <span class="hljs-comment">/*!&lt; DMA communication parameters           */</span> <br><br>  HAL_LockTypeDef            Lock;                                                             <span class="hljs-comment">/*!&lt; DMA locking object                     */</span>  <br><br>  __IO HAL_DMA_StateTypeDef  State;                                                            <span class="hljs-comment">/*!&lt; DMA transfer state                     */</span><br><br>  <span class="hljs-keyword">void</span>                       *Parent;                                                          <span class="hljs-comment">/*!&lt; Parent object state                    */</span> <br><br>  <span class="hljs-keyword">void</span>                       (* XferCpltCallback)( struct __DMA_HandleTypeDef * hdma);         <span class="hljs-comment">/*!&lt; DMA transfer complete callback         */</span><br><br>  <span class="hljs-keyword">void</span>                       (* XferHalfCpltCallback)( struct __DMA_HandleTypeDef * hdma);     <span class="hljs-comment">/*!&lt; DMA Half transfer complete callback    */</span><br><br>  <span class="hljs-keyword">void</span>                       (* XferM1CpltCallback)( struct __DMA_HandleTypeDef * hdma);       <span class="hljs-comment">/*!&lt; DMA transfer complete Memory1 callback */</span><br>  <br>  <span class="hljs-keyword">void</span>                       (* XferM1HalfCpltCallback)( struct __DMA_HandleTypeDef * hdma);   <span class="hljs-comment">/*!&lt; DMA transfer Half complete Memory1 callback */</span><br>  <br>  <span class="hljs-keyword">void</span>                       (* XferErrorCallback)( struct __DMA_HandleTypeDef * hdma);        <span class="hljs-comment">/*!&lt; DMA transfer error callback            */</span><br>  <br>  <span class="hljs-keyword">void</span>                       (* XferAbortCallback)( struct __DMA_HandleTypeDef * hdma);        <span class="hljs-comment">/*!&lt; DMA transfer Abort callback            */</span>  <br><br>  __IO <span class="hljs-keyword">uint32_t</span>              ErrorCode;                                                        <span class="hljs-comment">/*!&lt; DMA Error code                          */</span><br>  <br>  <span class="hljs-keyword">uint32_t</span>                   StreamBaseAddress;                                                <span class="hljs-comment">/*!&lt; DMA Stream Base Address                */</span><br><br>  <span class="hljs-keyword">uint32_t</span>                   StreamIndex;                                                      <span class="hljs-comment">/*!&lt; DMA Stream Index                       */</span><br> <br>&#125;DMA_HandleTypeDef;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>电子技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>USART</tag>
      
      <tag>串口</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FreeRTOS STM32 实现LED闪烁，KEY任务挂起与恢复任务</title>
    <link href="/2021/01/04/stm32-freertos-key-led/"/>
    <url>/2021/01/04/stm32-freertos-key-led/</url>
    
    <content type="html"><![CDATA[<p>这两天跟着<code>哔哩哔哩</code>学习了下 <code>FreeRTOS</code>，这里把学习中实现的一个入门代码分享出来。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>这里实现的功能是，共有连个任务，一个 <code>LED</code> 闪烁任务、一个<code>KEY</code>按键任务，通过判断按键是否按下来执行<code>挂起任务</code>和<code>恢复任务</code>。</p><ul><li>按键按下<ul><li>挂起LED任务 vTaskSuspend(defaultTaskHandle);</li></ul></li><li>按键松开<ul><li>恢复LED任务 vTaskResume(defaultTaskHandle);</li></ul></li></ul><h2 id="STM32CubeMX-配置"><a href="#STM32CubeMX-配置" class="headerlink" title="STM32CubeMX 配置"></a>STM32CubeMX 配置</h2><p>我的开发板型号是 NUCLEO-F410RB 开发板，</p><p>gpio 配置图<br><img src="/img/GPIO_Config.png" alt="gpio配置图"><br><code>GPIO</code>配置分为<code>LED</code>的io配置和<code>KEY</code>的io配置，key配置为外部中断<code>上下沿</code>触发模式，<code>LED</code>的io配置为默认的输出模式。</p><p>key按键配置<br><img src="/img/key-config.png" alt="key按键配置"></p><p>sys 配置<br><img src="/img/sys-config.png" alt="sys配置"><br>SYS配置把<code>Timebase Source</code>配置为TIM6基本定时器，其他不变。</p><p>FreeRTOS配置<br><img src="/img/freeRTOS-config.png" alt="FreeRTOS配置"><br><code>FreeRTOS</code> 配置主要就是添加 <code>KEY</code>任务，把任务名和任务函数入口名修改下即可，其他默认不变。</p><p>clock配置<br><img src="/img/clock-config.png" alt="clock配置"><br>时钟配置选择外部的8M晶振，<code>HCLK</code>选择最高 <code>100MHz</code>，其他默认不变。</p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><h3 id="freertos-c"><a href="#freertos-c" class="headerlink" title="freertos.c"></a>freertos.c</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* USER CODE BEGIN Header */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  ******************************************************************************</span><br><span class="hljs-comment">  * File Name          : freertos.c</span><br><span class="hljs-comment">  * Description        : Code for freertos applications</span><br><span class="hljs-comment">  ******************************************************************************</span><br><span class="hljs-comment">  * @attention</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * &lt;h2&gt;&lt;center&gt;&amp;copy; Copyright (c) 2021 STMicroelectronics.</span><br><span class="hljs-comment">  * All rights reserved.&lt;/center&gt;&lt;/h2&gt;</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * This software component is licensed by ST under Ultimate Liberty license</span><br><span class="hljs-comment">  * SLA0044, the &quot;License&quot;; You may not use this file except in compliance with</span><br><span class="hljs-comment">  * the License. You may obtain a copy of the License at:</span><br><span class="hljs-comment">  *                             www.st.com/SLA0044</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  ******************************************************************************</span><br><span class="hljs-comment">  */</span><br><span class="hljs-comment">/* USER CODE END Header */</span><br><br><span class="hljs-comment">/* Includes ------------------------------------------------------------------*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;main.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;cmsis_os.h&quot;</span></span><br><br><span class="hljs-comment">/* Private includes ----------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN Includes */</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;gpio.h&quot;</span></span><br><span class="hljs-comment">/* USER CODE END Includes */</span><br><br><span class="hljs-comment">/* Private typedef -----------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN PTD */</span><br><br><span class="hljs-comment">/* USER CODE END PTD */</span><br><br><span class="hljs-comment">/* Private define ------------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN PD */</span><br><br><span class="hljs-comment">/* USER CODE END PD */</span><br><br><span class="hljs-comment">/* Private macro -------------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN PM */</span><br><br><span class="hljs-comment">/* USER CODE END PM */</span><br><br><span class="hljs-comment">/* Private variables ---------------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN Variables */</span><br><span class="hljs-keyword">extern</span> UART_HandleTypeDef huart2;<br><span class="hljs-keyword">extern</span> KEY_Status KEYStatus;<br><span class="hljs-comment">/* USER CODE END Variables */</span><br>osThreadId defaultTaskHandle;<br>osThreadId SerialTaskHandle;<br>osThreadId keyTaskHandle;<br><br><span class="hljs-comment">/* Private function prototypes -----------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN FunctionPrototypes */</span><br><br><span class="hljs-comment">/* USER CODE END FunctionPrototypes */</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StartDefaultTask</span><span class="hljs-params">(<span class="hljs-keyword">void</span> <span class="hljs-keyword">const</span> * argument)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StartSerialTask</span><span class="hljs-params">(<span class="hljs-keyword">void</span> <span class="hljs-keyword">const</span> * argument)</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StartTaskKEY</span><span class="hljs-params">(<span class="hljs-keyword">void</span> <span class="hljs-keyword">const</span> * argument)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MX_FREERTOS_Init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>; <span class="hljs-comment">/* (MISRA C 2004 rule 8.1) */</span><br><br><span class="hljs-comment">/* GetIdleTaskMemory prototype (linked to static allocation support) */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">vApplicationGetIdleTaskMemory</span><span class="hljs-params">( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, <span class="hljs-keyword">uint32_t</span> *pulIdleTaskStackSize )</span></span>;<br><br><span class="hljs-comment">/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */</span><br><span class="hljs-keyword">static</span> StaticTask_t xIdleTaskTCBBuffer;<br><span class="hljs-keyword">static</span> StackType_t xIdleStack[configMINIMAL_STACK_SIZE];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">vApplicationGetIdleTaskMemory</span><span class="hljs-params">( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, <span class="hljs-keyword">uint32_t</span> *pulIdleTaskStackSize )</span></span><br><span class="hljs-function"></span>&#123;<br>  *ppxIdleTaskTCBBuffer = &amp;xIdleTaskTCBBuffer;<br>  *ppxIdleTaskStackBuffer = &amp;xIdleStack[<span class="hljs-number">0</span>];<br>  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;<br>  <span class="hljs-comment">/* place for user code */</span><br>&#125;<br><span class="hljs-comment">/* USER CODE END GET_IDLE_TASK_MEMORY */</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  FreeRTOS initialization</span><br><span class="hljs-comment">  * @param  None</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">  */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MX_FREERTOS_Init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN Init */</span><br><br>  <span class="hljs-comment">/* USER CODE END Init */</span><br><br>  <span class="hljs-comment">/* USER CODE BEGIN RTOS_MUTEX */</span><br>  <span class="hljs-comment">/* add mutexes, ... */</span><br>  <span class="hljs-comment">/* USER CODE END RTOS_MUTEX */</span><br><br>  <span class="hljs-comment">/* USER CODE BEGIN RTOS_SEMAPHORES */</span><br>  <span class="hljs-comment">/* add semaphores, ... */</span><br>  <span class="hljs-comment">/* USER CODE END RTOS_SEMAPHORES */</span><br><br>  <span class="hljs-comment">/* USER CODE BEGIN RTOS_TIMERS */</span><br>  <span class="hljs-comment">/* start timers, add new ones, ... */</span><br>  <span class="hljs-comment">/* USER CODE END RTOS_TIMERS */</span><br><br>  <span class="hljs-comment">/* USER CODE BEGIN RTOS_QUEUES */</span><br>  <span class="hljs-comment">/* add queues, ... */</span><br>  <span class="hljs-comment">/* USER CODE END RTOS_QUEUES */</span><br><br>  <span class="hljs-comment">/* Create the thread(s) */</span><br>  <span class="hljs-comment">/* definition and creation of defaultTask */</span><br>  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>);<br>  defaultTaskHandle = osThreadCreate(osThread(defaultTask), <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-comment">/* definition and creation of SerialTask */</span><br>  osThreadDef(SerialTask, StartSerialTask, osPriorityIdle, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>);<br>  SerialTaskHandle = osThreadCreate(osThread(SerialTask), <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-comment">/* definition and creation of keyTask */</span><br>  osThreadDef(keyTask, StartTaskKEY, osPriorityIdle, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>);<br>  keyTaskHandle = osThreadCreate(osThread(keyTask), <span class="hljs-literal">NULL</span>);<br><br>  <span class="hljs-comment">/* USER CODE BEGIN RTOS_THREADS */</span><br>  <span class="hljs-comment">/* add threads, ... */</span><br>  <span class="hljs-comment">/* USER CODE END RTOS_THREADS */</span><br><br>&#125;<br><br><span class="hljs-comment">/* USER CODE BEGIN Header_StartDefaultTask */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Function implementing the defaultTask thread.</span><br><span class="hljs-comment">  * @param  argument: Not used</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">  */</span><br><span class="hljs-comment">/* USER CODE END Header_StartDefaultTask */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StartDefaultTask</span><span class="hljs-params">(<span class="hljs-keyword">void</span> <span class="hljs-keyword">const</span> * argument)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN StartDefaultTask */</span><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-keyword">for</span>(;;)<br>  &#123;<br>    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);<br>    osDelay(<span class="hljs-number">1000</span>);<br>  &#125;<br>  <span class="hljs-comment">/* USER CODE END StartDefaultTask */</span><br>&#125;<br><br><span class="hljs-comment">/* USER CODE BEGIN Header_StartSerialTask */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* @brief Function implementing the SerialTask thread.</span><br><span class="hljs-comment">* @param argument: Not used</span><br><span class="hljs-comment">* @retval None</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/* USER CODE END Header_StartSerialTask */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StartSerialTask</span><span class="hljs-params">(<span class="hljs-keyword">void</span> <span class="hljs-keyword">const</span> * argument)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN StartSerialTask */</span><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-keyword">uint8_t</span> hello[] = <span class="hljs-string">&quot;hello,stm32\n&quot;</span>;<br>  <span class="hljs-keyword">for</span>(;;)<br>  &#123;<br>    HAL_UART_Transmit(&amp;huart2, hello, <span class="hljs-keyword">sizeof</span>(hello), <span class="hljs-number">100</span>);<br>    osDelay(<span class="hljs-number">1000</span>);<br>  &#125;<br>  <span class="hljs-comment">/* USER CODE END StartSerialTask */</span><br>&#125;<br><br><span class="hljs-comment">/* USER CODE BEGIN Header_StartTaskKEY */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* @brief Function implementing the keyTask thread.</span><br><span class="hljs-comment">* @param argument: Not used</span><br><span class="hljs-comment">* @retval None</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/* USER CODE END Header_StartTaskKEY */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">StartTaskKEY</span><span class="hljs-params">(<span class="hljs-keyword">void</span> <span class="hljs-keyword">const</span> * argument)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* USER CODE BEGIN StartTaskKEY */</span><br>  <span class="hljs-comment">/* Infinite loop */</span><br>  <span class="hljs-keyword">for</span>(;;)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (KEYStatus == KEY_DOWN) &#123;<br>      vTaskSuspend(defaultTaskHandle);  <span class="hljs-comment">// 挂起 led 任务</span><br>      KEYStatus = KEY_UNDEFINED;    <span class="hljs-comment">// 按键状态置位为 未知状态</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(KEYStatus == KEY_UP) &#123;<br>      vTaskResume(defaultTaskHandle);   <span class="hljs-comment">// 恢复 led 任务</span><br>      KEYStatus = KEY_UNDEFINED;    <span class="hljs-comment">// 按键状态置位为 未知状态</span><br>    &#125;<br>    osDelay(<span class="hljs-number">10</span>);<br>  &#125;<br>  <span class="hljs-comment">/* USER CODE END StartTaskKEY */</span><br>&#125;<br><br><span class="hljs-comment">/* Private application code --------------------------------------------------*/</span><br><span class="hljs-comment">/* USER CODE BEGIN Application */</span><br><br><span class="hljs-comment">/* USER CODE END Application */</span><br><br><span class="hljs-comment">/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/</span><br><br></code></pre></div></td></tr></table></figure><h3 id="gpio-h"><a href="#gpio-h" class="headerlink" title="gpio.h"></a>gpio.h</h3><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">/* <span class="hljs-keyword">USER</span> <span class="hljs-title">CODE</span> BEGIN Private defines */<br>typedef enum &#123;<br>  KEY_DOWN,<br>  KEY_UP,<br>  KEY_UNDEFINED<br>&#125; KEY_Status;<br>/* <span class="hljs-keyword">USER</span> <span class="hljs-title">CODE</span> END Private defines */<br></code></pre></div></td></tr></table></figure><h3 id="gpio-c"><a href="#gpio-c" class="headerlink" title="gpio.c"></a>gpio.c</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* USER CODE BEGIN 0 */</span><br>KEY_Status KEYStatus = KEY_UNDEFINED;<br><span class="hljs-comment">/* USER CODE END 0 */</span><br><br><span class="hljs-comment">// 外部中断回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">HAL_GPIO_EXTI_Callback</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> GPIO_Pin)</span></span>&#123;<br>  <span class="hljs-keyword">if</span> (GPIO_Pin == KEY_Pin) &#123;<br>    <span class="hljs-keyword">if</span> (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET) &#123;<br>      <span class="hljs-comment">// KEY 低电平下降沿触发</span><br>      KEYStatus = KEY_DOWN;<br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) &#123;<br>      <span class="hljs-comment">// KEY 高电平上升沿触发</span><br>      KEYStatus = KEY_UP;<br><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p><a href="https://www.bilibili.com/video/BV1cp4y1x7H9">https://www.bilibili.com/video/BV1cp4y1x7H9</a></p><h2 id="FreeRTOS-视频教程列表"><a href="#FreeRTOS-视频教程列表" class="headerlink" title="FreeRTOS 视频教程列表"></a>FreeRTOS 视频教程列表</h2><ul><li>「物联网操作系统」- FreeRTOS开发训练营 ( <a href="https://www.bilibili.com/video/BV1864y1T7Z7">https://www.bilibili.com/video/BV1864y1T7Z7</a> )</li></ul>]]></content>
    
    
    <categories>
      
      <category>电子技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>FreeRTOS</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>w25qxx Flash使用笔记</title>
    <link href="/2020/12/31/w251xx/"/>
    <url>/2020/12/31/w251xx/</url>
    
    <content type="html"><![CDATA[<p><code>w25qxx</code> 是一系列 <code>SPI Flash</code> 存储芯片的总称，这些芯片包括很多型号如：<code>w25q16</code> <code>w25q32</code> <code>w25q64</code>等。</p><p><code>W25Q64</code> 的擦写周期多达 <code>10W</code> 次，具有 20 年的数据保存期限，支持电压为 <code>2.7~3.6V</code>。</p><h2 id="w25q64"><a href="#w25q64" class="headerlink" title="w25q64"></a>w25q64</h2><p>W25Q64BV（64兆位）串行FLASH存储器为一个空间大小，引脚，功耗限制的系统提供解决方案。25Q系列的灵活性和性能良好超越了普通的串行FLASH设备。该芯片是理想的代码跟踪到RAM，通过两路或四路SPI（XIP）直接执行代码来存储声音，文字，数据等，只需要一个2.7V到3.6V的供电，在活跃状态是电流消耗可以低至4mA,掉电模式下可以低到1uA。所有的设备都提供节省面积的封装。</p><h2 id="w25q64-编程"><a href="#w25q64-编程" class="headerlink" title="w25q64 编程"></a>w25q64 编程</h2><h3 id="方法列表"><a href="#方法列表" class="headerlink" title="方法列表"></a>方法列表</h3><ul><li>w25qxx_Init(void) 初始化</li><li>w25qxx_EraseChip(void) 擦除整个芯片</li><li>w25qxx_EraseSector(uint32_t SectorAddr) 擦除单个扇区</li><li>w25qxx_EraseBlock(uint32_t BlockAddr) 擦除单个块</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>电子技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>w5qxx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储器类型介绍</title>
    <link href="/2020/12/30/memorizer-type/"/>
    <url>/2020/12/30/memorizer-type/</url>
    
    <content type="html"><![CDATA[<p>在学习单片机的时候，老是忘记各种存储器<code>RAM</code>,<code>ROM</code>,<code>FLASH</code>等等类型的一些区别，这里做个笔记来记录一些常用的存储器类型。</p><p>存储器按是否易失分为：易失型和非易失型</p><h2 id="易失型-RAM"><a href="#易失型-RAM" class="headerlink" title="易失型 RAM"></a>易失型 RAM</h2><ul><li>DRAM<ul><li>SDRAM</li><li>DDR SDRAM</li><li>DDRII SDRAM</li><li>DDRIII SDRAM</li></ul></li><li>SRAM</li></ul><h3 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h3><p>动态随机存取存储器（<code>Dynamic Random Access Memory，DRAM</code>）是一种半导体存储器，主要的作用原理是利用电容内存储电荷的多寡来代表一个二进制比特（<code>bit</code>）是<code>1</code>还是<code>0</code>。由于在现实中晶体管会有漏电电流的现象，导致电容上所存储的电荷数量并不足以正确的判别数据，而导致数据毁损。因此对于<code>DRAM</code>来说，周期性地充电是一个无可避免的要件。由于这种需要定时刷新的特性，因此被称为“动态”存储器。相对来说，静态存储器（<code>SRAM</code>）只要存入数据后，纵使不刷新也不会丢失记忆</p><h3 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h3><p>静态随机存取存储器（<code>Static Random-Access Memory，SRAM</code>）是随机存取存储器的一种。所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。相对之下，动态随机存取存储器（<code>DRAM</code>）里面所储存的数据就需要周期性地更新。然而，当电力供应停止时，<code>SRAM</code>储存的数据还是会消失（被称为<code>volatile memory</code>），这与在断电后还能储存资料的<code>ROM</code>或闪存是不同的。</p><h3 id="SDRAM"><a href="#SDRAM" class="headerlink" title="SDRAM"></a>SDRAM</h3><p>同步动态随机存取内存（<code>synchronous dynamic random-access memory</code>，简称<code>SDRAM</code>）是有一个同步接口的动态随机存取内存（<code>DRAM</code>）。通常<code>DRAM</code>是有一个异步接口的，这样它可以随时响应控制输入的变化。而<code>SDRAM</code>有一个同步接口，在响应控制输入前会等待一个时钟信号，这样就能和计算机的系统总线同步。时钟被用来驱动一个有限状态机，对进入的指令进行管线(<code>Pipeline</code>)操作。这使得<code>SDRAM</code>与没有同步接口的异步<code>DRAM</code>(<code>asynchronous DRAM</code>)相比，可以有一个更复杂的操作模式。</p><h2 id="非易失型-ROM"><a href="#非易失型-ROM" class="headerlink" title="非易失型 ROM"></a>非易失型 ROM</h2><ul><li>ROM<ul><li>MASK ROM</li><li>PROM<ul><li>OTPROM</li><li>EPROM</li><li>EEPROM</li></ul></li></ul></li><li>FLASH<ul><li>NOR FLASH</li><li>NAND FLASH</li></ul></li></ul><h3 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h3><p>只读存储器（Read-Only Memory，ROM）以非破坏性读出方式工作，只能读出无法写入信息。信息一旦写入后就固定下来，即使切断电源，信息也不会丢失，所以又称为固定存储器。ROM所存数据通常是装入整机前写入的，整机工作过程中只能读出，不像随机存储器能快速方便地改写存储内容。ROM所存数据稳定 ，断电后所存数据也不会改变，并且结构较简单，使用方便，因而常用于存储各种固定程序和数据。</p><h3 id="MASK-ROM"><a href="#MASK-ROM" class="headerlink" title="MASK ROM"></a>MASK ROM</h3><p>掩膜只读存储器（<code>Mask ROM</code>）中存储的信息由生产厂家在掩膜工艺过程中“写入”。在制造过程中，将资料以一特制光罩（<code>Mask</code>）烧录于线路中，有时又称为“光罩式只读内存”（<code>Mask ROM</code>），此内存的制造成本较低，常用于电脑中的开机启动。其行线和列线的交点处都设置了MOS管，在制造时的最后一道掩膜工艺，按照规定的编码布局来控制<code>MOS</code>管是否与行线、列线相连。相连者定为1（或0），未连者为0（或1），这种存储器一旦由生产厂家制造完毕，用户就无法修改。</p><p><code>MROM</code>的主要优点是存储内容固定，掉电后信息仍然存在,可靠性高。缺点是信息一次写入（制造）后就不能修改，很不灵活且生产周期长，用户与生产厂家之间的依赖性大。</p><h3 id="PROM-可编程只读存储器"><a href="#PROM-可编程只读存储器" class="headerlink" title="PROM - 可编程只读存储器"></a>PROM - 可编程只读存储器</h3><p>可编程只读存储器（<code>Programmable ROM，PROM</code>）允许用户通过专用的设备（编程器）一次性写入自己所需要的信息，其一般可编程一次，<code>PROM</code>存储器出厂时各个存储单元皆为1，或皆为0。用户使用时，再使用编程的方法使<code>PROM</code>存储所需要的数据。</p><p><code>PROM</code>的种类很多，需要用电和光照的方法来编写与存放的程序和信息。但仅仅只能编写一次，第一次写入的信息就被永久性地保存起来。例如，双极性<code>PROM</code>有两种结构：一种是熔丝烧断型，一种是<code>PN</code>结击穿型。它们只能进行一次性改写，一旦编程完毕，其内容便是永久性的。由于可靠性差，又是一次性编程，较少使用。<code>PROM</code>中的程序和数据是由用户利用专用设备自行写入，一经写入无法更改，永久保存。<code>PROM</code>具有一定的灵活性，适合小批量生产，常用于工业控制机或电器中。</p><h3 id="OTPROM-一次编程只读内存"><a href="#OTPROM-一次编程只读内存" class="headerlink" title="OTPROM - 一次编程只读内存"></a>OTPROM - 一次编程只读内存</h3><p>一次编程只读内存（<code>One Time Programmable Read Only Memory，OTPROM</code>）之写入原理同<code>EPROM</code>，但是为了节省成本，编程写入之后就不再抹除，因此不设置透明窗。</p><h3 id="EPROM-可编程可擦除只读存储器"><a href="#EPROM-可编程可擦除只读存储器" class="headerlink" title="EPROM - 可编程可擦除只读存储器"></a>EPROM - 可编程可擦除只读存储器</h3><p>可编程可擦除只读存储器（<code>Erasable Programmable Read Only Memory，EPROM</code>）可多次编程，是一种以读为主的可写可读的存储器。是一种便于用户根据需要来写入，并能把已写入的内容擦去后再改写的<code>ROM</code>。其存储的信息可以由用户自行加电编写，也可以利用紫外线光源或脉冲电流等方法先将原存的信息擦除，然后用写入器重新写入新的信息。 <code>EPROM</code>比<code>MROM</code>和<code>PROM</code>更方便、灵活、经济实惠。但是<code>EPROM</code>采用<code>MOS</code>管，速度较慢。</p><h3 id="EEPROM"><a href="#EEPROM" class="headerlink" title="EEPROM"></a>EEPROM</h3><p>电可擦可编程序只读存储器（<code>Electrically Erasable Programmable Read-Only Memory，EEPROM</code>）是一种随时可写入而无须擦除原先内容的存储器，其写操作比读操作时间要长得多，<code>EEPROM</code>把不易丢失数据和修改灵活的优点组合起来，修改时只需使用普通的控制、地址和数据总线。<code>EEPROM</code>运作原理类似<code>EPROM</code>，但抹除的方式是使用高电场来完成，因此不需要透明窗。 <code>EEPROM</code>比 <code>EPROM</code>贵，集成度低，成本较高，一般用于保存系统设置的参数、<code>IC</code>卡上存储信息、电视机或空调中的控制器。但由于其可以在线修改，所以可靠性不如 <code>EPROM</code>。</p><h3 id="FLASH"><a href="#FLASH" class="headerlink" title="FLASH"></a>FLASH</h3><p>快擦除读写存储器(<code>Flash Memory</code>)是英特尔公司90年代中期发明的一种高密度、非易失性的读/写半导体存储器它既有<code>EEPROM</code>的特点，又有<code>RAM</code>的特点，是一种全新的存储结构，俗称快闪存储器。它在20世纪80年代中后期首次推出，快闪存储器的价格和功能介于 <code>EPROM</code>和<code>EEPROM</code>之间。与 <code>EEPROM</code>一样，快闪存储器使用电可擦技术，整个快闪存储器可以在一秒钟至几秒内被擦除，速度比 <code>EPROM</code>快得多。另外，它能擦除存储器中的某些块，而不是整块芯片。然而快闪存储器不提供字节级的擦除，与 <code>EPROM</code>一样，快闪存储器每位只使用一个晶体管，因此能获得与 <code>EPROM</code>一样的高密度(与 <code>EEPROM</code>相比较)。“闪存”芯片采用单一电源（3V或者5V）供电，擦除和编程所需的特殊电压由芯片内部产生，因此可以在线系统擦除与编程。“闪存”也是典型的非易失性存储器，在正常使用情况下，其浮置栅中所存电子可保存100年而不丢失。</p><h3 id="NOR-FLASH-于-NAND-FLASH"><a href="#NOR-FLASH-于-NAND-FLASH" class="headerlink" title="NOR FLASH 于 NAND FLASH"></a>NOR FLASH 于 NAND FLASH</h3><p>是市场上两种主要的非易失闪存技术之一。<code>Intel</code>于1988年首先开发出<code>NOR Flash</code> 技术，彻底改变了原先由<code>EPROM</code>(<code>Erasable Programmable Read-Only-Memory</code>电可编程序只读存储器)和<code>EEPROM</code>(电可擦只读存储器<code>Electrically Erasable Programmable Read - Only Memory</code>)一统天下的局面。紧接着，1989年，东芝公司发表了<code>NAND Flash</code> 结构，强调降低每比特的成本，有更高的性能，并且像磁盘一样可以通过接口轻松升级。<code>NOR Flash</code> 的特点是芯片内执行（<code>XIP ，eXecute In Place</code>），这样应用程序可以直接在<code>Flash</code>闪存内运行，不必再把代码读到系统<code>RAM</code>中。<code>NOR</code> 的传输效率很高，在1~4MB的小容量时具有很高的成本效益，但是很低的写入和擦除速度大大影响到它的性能。<code>NAND</code>的结构能提供极高的单元密度，可以达到高存储密度，并且写入和擦除的速度也很快。应用<code>NAND</code>的困难在于<code>Flash</code>的管理需要特殊的系统接口。通常读取<code>NOR</code>的速度比<code>NAND</code>稍快一些，而<code>NAND</code>的写入速度比<code>NOR</code>快很多，在设计中应该考虑这些情况。</p><p>关于更详细的 <code>NOR FLASH</code> 和 <code>NAND FLASH</code> 讲解请看下面这篇文章：<br><a href="https://www.cnblogs.com/iriczhao/p/12128451.html">https://www.cnblogs.com/iriczhao/p/12128451.html</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>存储器</tag>
      
      <tag>ROM</tag>
      
      <tag>RAM</tag>
      
      <tag>FLASH</tag>
      
      <tag>SDRAM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32 GPIO 寄存器</title>
    <link href="/2020/12/30/stm32-gpio/"/>
    <url>/2020/12/30/stm32-gpio/</url>
    
    <content type="html"><![CDATA[<p>本篇文章来了解下 <code>stm32</code> 的 <code>gpio</code> 寄存器，<code>STM32</code>的<code>GPIO</code>共有11个寄存器，下面来详细介绍：</p><p>每个通用 <code>I/O</code> 端口都有一下寄存器</p><ul><li>4 个 32 位配置寄存器（<code>GPIOx_MODER</code>、<code>GPIOx_OTYPER</code>、<code>GPIOx_OSPEEDR</code> 和 <code>GPIOx_PUPDR</code>）</li><li>2个32位数据寄存器(<code>GPIOx_IDR</code> 和 <code>GPIOx_ODR</code>)</li><li>1个32位置位/复位寄存器(<code>GPIOx_BSRR</code>)</li><li>1个16位复位寄存器(<code>GPIOx_BRR</code>)</li><li>1个32位锁定寄存器(<code>GPIOx_LCKR</code>)</li><li>2 个 32 位复用功能选择寄存器（<code>GPIOx_AFRH</code> 和 <code>GPIOx_AFRL</code>）</li></ul><h2 id="GPIO-主要特性"><a href="#GPIO-主要特性" class="headerlink" title="GPIO 主要特性"></a>GPIO 主要特性</h2><ul><li>受控 <code>I/O</code> 多达 16 个</li><li>输出状态：推挽或开漏 + 上拉/下拉</li><li>从输出数据寄存器 (<code>GPIOx_ODR</code>) 或外设（复用功能输出）输出数据</li><li>可为每个 <code>I/O</code> 选择不同的速度</li><li>输入状态：浮空、上拉/下拉、模拟</li><li>将数据输入到输入数据寄存器 (<code>GPIOx_IDR</code>) 或外设（复用功能输入）</li><li>置位和复位寄存器 (<code>GPIOx_BSRR</code>)，对 <code>GPIOx_ODR</code> 具有按位写权限</li><li>锁定机制 (<code>GPIOx_LCKR</code>)，可冻结 <code>I/O</code> 配置</li><li>模拟功能</li><li>复用功能输入/输出选择寄存器（一个 <code>I/O</code> 最多可具有 16 个复用功能）</li><li>快速翻转，每次翻转最快只需要两个时钟周期</li><li>引脚复用非常灵活，允许将 <code>I/O</code> 引脚用作 <code>GPIO</code> 或多种外设功能中的一种</li></ul><p>每个<code>I/O</code>端口位可以自由编程，然而必须按照32位字访问<code>I/O</code>端口寄存器(不允许半字或字节访问)。</p><p><code>GPIOx_BSRR</code>和<code>GPIOx_BRR</code>寄存器允许对任何<code>GPIO</code>寄存器进行读/更改的独立访问；这样，在读和更改访问之间产生<code>IRQ</code>时不会发生危险。</p><h2 id="GPIO-功能描述"><a href="#GPIO-功能描述" class="headerlink" title="GPIO 功能描述"></a>GPIO 功能描述</h2><p>根据数据手册中列出的每个 I/O 端口的特性，可通过软件将通用 I/O (GPIO) 端口的各个端口 位分别配置为多种模式：</p><ul><li>输入浮空</li><li>输入上拉</li><li>输入下拉</li><li>模拟功能</li><li>具有上拉或下拉功能的开漏输出</li><li>具有上拉或下拉功能的推挽输出</li><li>具有上拉或下拉功能的复用功能推挽</li><li>具有上拉或下拉功能的复用功能开漏</li></ul><p>下图给出了一个<code>I/O</code>端口位的基本结构。</p><p><img src="/img/stm32-gpio-1.png" alt="STM32 GPIO"></p><h2 id="I-O-端口控制寄存器"><a href="#I-O-端口控制寄存器" class="headerlink" title="I/O 端口控制寄存器"></a>I/O 端口控制寄存器</h2><p>每个 <code>GPIO</code> 有 4 个 32 位存储器映射的控制寄存器（<code>GPIOx_MODER</code>、<code>GPIOx_OTYPER</code>、 <code>GPIOx_OSPEEDR</code>、<code>GPIOx_PUPDR</code>），可配置多达 16 个 <code>I/O</code>。</p><ul><li><code>GPIOx_MODER</code> 寄存器用于 选择 I/O 方向（输入、输出、AF、模拟）。</li><li><code>GPIOx_OTYPER</code> 和 <code>GPIOx_OSPEEDR</code> 寄存器分 别用于选择输出类型（推挽或开漏）和速度 (无论采用哪种 I/O 方向，都会直接将 I/O 速度引 脚连接到相应的<code>GPIOx_OSPEEDR</code> 寄存器位）。无论采用哪种 <code>I/O</code> 方向，<code>GPIOx_PUPDR</code> 寄 存器都用于选择上拉/下拉。</li><li><code>GPIOx_PUPDR</code> 寄存器都用于选择上拉/下拉</li></ul><h2 id="I-O-端口数据寄存器"><a href="#I-O-端口数据寄存器" class="headerlink" title="I/O 端口数据寄存器"></a>I/O 端口数据寄存器</h2><p>每个 <code>GPIO</code> 都具有 2 个 16 位数据寄存器：输入和输出数据寄存器（<code>GPIOx_IDR</code> 和 <code>GPIOx_ODR</code>）。<code>GPIOx_ODR</code> 用于存储待输出数据，可对其进行读/写访问。通过 <code>I/O</code> 输入的数据存储到输入数据寄存器 (<code>GPIOx_IDR</code>) 中，它是一个<strong>只读寄存器</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>电子技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>GPIO</tag>
      
      <tag>IO</tag>
      
      <tag>寄存器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>推荐一款 STM32 的 vscode 插件，stm32-for-vscode</title>
    <link href="/2020/12/29/stm32-for-vscode/"/>
    <url>/2020/12/29/stm32-for-vscode/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/bmd-studio/stm32-for-vscode">stm32-for-vscode</a> 是一款用于使用 <code>vscode</code> 来开发 <code>stm32</code> 项目的插件，这款插件是 2019 首次发布的，属于比较新的插件了，通过测试可以使用。</p><h2 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h2><p>该插件可以实现快速的 <span class="label label-primary">编译</span> <span class="label label-primary">下载</span> <span class="label label-primary">调试</span> STM32 项目，先决条件是：</p><ol><li><a href="https://github.com/Marus/cortex-debug">Cortex-Debug</a>，安装这个 vscode 扩展和基础的C/C++插件</li><li><a href="https://developer.arm.com/tools-and-software/open-source-software/developer-tools/gnu-toolchain/gnu-rm/downloads">GNU Arm Embedded Toolchain</a>，安装该软件，并配置好环境变量</li><li><a href="http://gnuwin32.sourceforge.net/packages/make.htm">Make</a> ，电脑上要有 make.exe，并且配好环境变量</li><li><a href="https://gnutoolchains.com/arm-eabi/openocd/">OpenOCD</a>，安装 OpenOCD，并配置环境变量</li></ol><p>以上4条是先决条件，接下来使用 <code>ST</code>官方提供的 <code>STM32CubeMX</code> 来创建一个项目，在项目配置 <code>Toolchain / IDE</code> 处选择 <code>Makefile</code>。</p><p>创建完成项目后，用<code>vscode</code>打开，执行 <code>ctrl+shift+p</code> 打开命令面板，在面板中输入 “stm32”后会出现三个命令，分别为：<br><img src="/img/stm32-for-vscode.png" alt="stm32 for vscode"></p><p>第一次执行编译命令后，会在项目中生成 <code>.vscode</code> 文件夹，文件夹中包含一下几个文件:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">c_cpp_properties</span><span class="hljs-selector-class">.json</span><br><span class="hljs-selector-tag">launch</span><span class="hljs-selector-class">.json</span><br><span class="hljs-selector-tag">settings</span><span class="hljs-selector-class">.json</span><br><span class="hljs-selector-tag">tasks</span><span class="hljs-selector-class">.json</span><br></code></pre></div></td></tr></table></figure><p>这几个文件就是 <code>stm32-for-vscode</code> 这几个插件生成的，默认也是配置好的，可以不用修改直接使用。</p><h2 id="给任务添加快捷键"><a href="#给任务添加快捷键" class="headerlink" title="给任务添加快捷键"></a>给任务添加快捷键</h2><p><code>ctrl+1</code> : 编译<br><code>ctrl+2</code> : 下载<br><code>ctrl+3</code> : Clean 与 编译</p><p>keybindings.json</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">[<br>    &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;ctrl+1&quot;</span>,<br>        <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;workbench.action.tasks.runTask&quot;</span>,<br>        <span class="hljs-attr">&quot;args&quot;</span>: <span class="hljs-string">&quot;Build STM&quot;</span>,<br>        <span class="hljs-attr">&quot;when&quot;</span>: <span class="hljs-string">&quot;editorTextFocus&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;ctrl+2&quot;</span>,<br>        <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;workbench.action.tasks.runTask&quot;</span>,<br>        <span class="hljs-attr">&quot;args&quot;</span>: <span class="hljs-string">&quot;Flash STM&quot;</span>,<br>        <span class="hljs-attr">&quot;when&quot;</span>: <span class="hljs-string">&quot;editorTextFocus&quot;</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-string">&quot;ctrl+3&quot;</span>,<br>        <span class="hljs-attr">&quot;command&quot;</span>: <span class="hljs-string">&quot;workbench.action.tasks.runTask&quot;</span>,<br>        <span class="hljs-attr">&quot;args&quot;</span>: <span class="hljs-string">&quot;Build Clean STM&quot;</span>,<br>        <span class="hljs-attr">&quot;when&quot;</span>: <span class="hljs-string">&quot;editorTextFocus&quot;</span><br>    &#125;<br>]<br></code></pre></div></td></tr></table></figure><ul><li><strong>key</strong> 表示绑定的键。</li><li><strong>command</strong> 表示执行的命令。</li><li><strong>args</strong> 命令的参数，这里我们是build编译任务</li><li><strong>when</strong> 快捷键在何时生效，这里指的是编辑区</li></ul>]]></content>
    
    
    <categories>
      
      <category>电子技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>vscode</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MSYS2 命令笔记</title>
    <link href="/2020/12/29/msys2-command/"/>
    <url>/2020/12/29/msys2-command/</url>
    
    <content type="html"><![CDATA[<p>首先说说什么是 <code>MSYS2</code> ？</p><p><code>MSYS2 （Minimal SYStem 2)</code> 是一个<code>MSYS</code>的独立改写版本，主要用于 <code>shell</code> 命令行开发环境。同时它也是一个在<code>Cygwin</code> （<code>POSIX</code> 兼容性层） 和 <code>MinGW-w64</code>（从”<code>MinGW</code>-生成”）基础上产生的，追求更好的互操作性的 <code>Windows</code> 软件。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pacman -Sy 更新软件包数据<br>pacman -R package-name 删除软件包<br>pacman -S package-name 安装软件包<br>pacman -Syu 更新所有<br>pacman -Ss xx 查询软件xx的信息<br></code></pre></div></td></tr></table></figure><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>安装软件通过 <code>pacman -S package-name</code> 来安装。</p><p>如果不知道具体的软件名或要安装的版本信息，则可以先通过 <code>pacman -Ss xx 查询软件xx的信息</code>命令，来先查一下软件的具体信息；因为有些软件包含很多的版本,所以通过该命令来找到具体的软件包名称后，通过复制软件名再通过 <code>pacman -S</code> 来安装。</p><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://www.msys2.org/">https://www.msys2.org/</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MSYS2</tag>
      
      <tag>命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用 VSCode 开发 STM32 项目</title>
    <link href="/2020/12/29/stm32-vscode-dev/"/>
    <url>/2020/12/29/stm32-vscode-dev/</url>
    
    <content type="html"><![CDATA[<p>vscode 是一款最好用的开发工具之一，该软件非常好用强大，通过安装插件几乎可以完成所有的开发工作。</p><p>用 vscode 开发 stm32 的步骤是：</p><ol><li>用<code>STM32CubeMX</code> 生成 <code>stm32</code> 项目，注意要生成 <code>Makefile</code> 项目</li><li>使用 stm32-for-vscode 插件来 <span class="label label-primary">编译</span> <span class="label label-primary">调试</span> <span class="label label-primary">下载</span> 代码。</li><li>添加自己的 <code>c</code> 源文件和头文件，并把这些文件的路径添加到 <code>Makefile</code> 中</li></ol><p>所以要维护的也就是 <code>Makefile</code> 文件。</p><h2 id="添加-u-printf-float-u-sprintf-float"><a href="#添加-u-printf-float-u-sprintf-float" class="headerlink" title="添加 -u_printf_float -u_sprintf_float"></a>添加 -u_printf_float -u_sprintf_float</h2><p>添加串口打印浮点数的功能</p><p>在 Makefile 中这行代码前添加</p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs makefile">LDFLAGS = <span class="hljs-variable">$(MCU)</span> -u_printf_float -u_sprintf_float -specs=nano.specs -T<span class="hljs-variable">$(LDSCRIPT)</span> <span class="hljs-variable">$(LIBDIR)</span> <span class="hljs-variable">$(LIBS)</span> -Wl,-Map=<span class="hljs-variable">$(BUILD_DIR)</span>/<span class="hljs-variable">$(TARGET)</span>.map,--cref -Wl,--gc-sections<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>电子技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 配置笔记</title>
    <link href="/2020/12/28/Hexo-%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/12/28/Hexo-%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇介绍 <code>hexo</code> 配置的文章。</p><h2 id="选择一款主题"><a href="#选择一款主题" class="headerlink" title="选择一款主题"></a>选择一款主题</h2><p>在我有意的搜索中，发现了这款漂亮的主题 <code>fluid</code>，这是一款 <code>Material Design</code> 风格的主题，通过测试发现这款主题还是比较完美的。</p><h3 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h3><p><img src="/img/fluid.png" alt="fluid"></p><h3 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h3><ul><li><a href="https://hexo.fluid-dev.com/">https://hexo.fluid-dev.com/</a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></li></ul><p>该主题对中文用户非常友好，配置中的注释都是中文的，所有功能开箱即用。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>快速开始使用 Hexo 写文章并且发布到 <code>Github Page</code> 上，前提是还要安装个插件：</p><p><code>$ npm install hexo-deployer-git --save</code></p><p>这里贴上配置代码：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&#x27;https://github.com/FY2008/fy2008.github.io.git&#x27;</span> <span class="hljs-comment"># https://bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">&#x27;main&#x27;</span><br>  <span class="hljs-attr">message:</span> <span class="hljs-string">&quot;站点更新: <span class="hljs-template-variable">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span><br></code></pre></div></td></tr></table></figure><h2 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h2><h3 id="init-初始化"><a href="#init-初始化" class="headerlink" title="init 初始化"></a>init 初始化</h3><p><code>$ hexo init [folder]</code></p><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h3 id="new-新建命令"><a href="#new-新建命令" class="headerlink" title="new 新建命令"></a>new 新建命令</h3><p><code>$ hexo new [layout] &lt;title&gt;</code></p><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-p, –path</td><td align="left">自定义新文章的路径</td></tr><tr><td align="left">-r, –replace</td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left">-s, –slug</td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 index.md 文件。你可以使用 –path 参数来覆盖上述行为、自行决定文件的目录：</p><p><code>hexo new page --path about/me &quot;About me&quot;</code></p><p>以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><p><code>hexo new page --path about/me</code></p><p><code>D:\dev\blog&gt;hexo new post -p stm32-for-vscode &quot;推荐一款 STM32 的 vscode 插件，stm32-for-vscode&quot;</code></p><p>这条命令是新建一个文章，并且指定路径名和文章标题名，路径名通过 <code>-p</code> 指定，文章标题名在最后面，并且用双引号括起来，以为文章标题包含空格。</p><h3 id="generate-生成命令（g）"><a href="#generate-生成命令（g）" class="headerlink" title="generate 生成命令（g）"></a>generate 生成命令（g）</h3><p><code>$ hexo generate</code><br>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-d, –deploy</td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left">-w, –watch</td><td align="left">监视文件变动</td></tr><tr><td align="left">-b, –bail</td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left">-f, –force</td><td align="left">强制重新生成文件Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</td></tr><tr><td align="left">-c, –concurrency</td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为:</p><p><code>$ hexo g</code></p><h3 id="建立文章草稿"><a href="#建立文章草稿" class="headerlink" title="建立文章草稿"></a>建立文章草稿</h3><p><code>$ hexo new draft &lt;title&gt;</code></p><p><code>Hexo</code> 另外提供 <code>draft</code> 机制，它的原理是新文章将建立在 <code>source/_drafts</code> 目录下，因此 <code>hexo generate</code> 并不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署到 <code>GitHub</code>。</p><h3 id="将草稿发布为正式文章"><a href="#将草稿发布为正式文章" class="headerlink" title="将草稿发布为正式文章"></a>将草稿发布为正式文章</h3><p><code>$ hexo publish [layout] &lt;filename&gt;</code><br><code>$ hexo P &lt;filename&gt;</code></p><p>其中 <code>&lt;filename&gt;</code> 为不包含 <code>md</code> 后缀的文章名称。它的原理只是将文章从 <code>source/_drafts</code> 移动到 <code>source/_posts</code> 而已。</p><h3 id="server-启动本地服务器"><a href="#server-启动本地服务器" class="headerlink" title="server 启动本地服务器"></a>server 启动本地服务器</h3><p><code>$ hexo server</code></p><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a></p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-p, –port</td><td align="left">重设端口</td></tr><tr><td align="left">-s, –static</td><td align="left">只使用静态文件</td></tr><tr><td align="left">-l, –log</td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><p>该命令可以简写为:</p><p><code>$ hexo s</code></p><h3 id="deploy-部署命令"><a href="#deploy-部署命令" class="headerlink" title="deploy 部署命令"></a>deploy 部署命令</h3><p><code>$ hexo deploy</code></p><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-g, –generate</td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><p><code>$ hexo d</code></p><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><p><code>$ hexo clean</code></p><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p><code>$ hexo list &lt;type&gt;</code></p><p>list 命令参数</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim">Argument<span class="hljs-variable">s:</span><br>  <span class="hljs-built_in">type</span>  Available <span class="hljs-built_in">type</span><span class="hljs-variable">s:</span> page, post, route, <span class="hljs-keyword">tag</span>, category<br></code></pre></div></td></tr></table></figure><p>列出网站资料。</p><h3 id="version"><a href="#version" class="headerlink" title="version"></a>version</h3><p><code>$ hexo version</code></p><p>显示 Hexo 版本。</p><h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><p><code>$ hexo --draft</code></p><p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p><h2 id="Fluid-主题-tag-标签插件的颜色"><a href="#Fluid-主题-tag-标签插件的颜色" class="headerlink" title="Fluid 主题 tag 标签插件的颜色"></a>Fluid 主题 tag 标签插件的颜色</h2><figure class="highlight django"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">note</span> success %&#125;</span><br><span class="xml">文字 或者 `markdown` 均可</span><br><span class="hljs-template-tag">&#123;% <span class="hljs-name">endnote</span> %&#125;</span><br></code></pre></div></td></tr></table></figure><p>或者使用 HTML 形式：</p><p><code>&lt;p class=&quot;note note-primary&quot;&gt;标签&lt;/p&gt;</code></p><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div><h3 id="可选便签"><a href="#可选便签" class="headerlink" title="可选便签"></a>可选便签</h3><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div><div class="note note-warning">            <p><strong>WARNING</strong></p><p><code>使用时 &lt;div class=&quot;note note-primary&quot;&gt;             &lt;p&gt;和 &lt;/p&gt;           &lt;/div&gt; 需单独一行，否则会出现问题</code></p>          </div><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><p>在 <code>markdown</code> 中加入如下的代码来使用 <code>Label</code>：</p><p><code>&#123;% label primary @text %&#125;</code></p><p>或者使用 HTML 形式：</p><p><code>&lt;span class=&quot;label label-primary&quot;&gt;Label&lt;/span&gt;</code></p><span class="label label-primary">text</span><span class="label label-default">text</span><span class="label label-info">text</span><span class="label label-success">text</span><span class="label label-warning">text</span><span class="label label-danger">text</span><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><p>在 markdown 中加入如下的代码来使用 Checkbox：<br><code>&#123;% cb text, checked?, incline? %&#125;</code></p><p>text：显示的文字<br>checked：默认是否已勾选，默认 false<br>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</p>            <input type="checkbox" disabled checked="checked">text                      <input type="checkbox" disabled >text                      <input type="checkbox" disabled >text          <input type="checkbox" disabled > text<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>你可以在 markdown 中加入如下的代码来使用 Button：</p><p><code>&#123;% btn url, text, title %&#125;</code></p><p>或者使用 HTML 形式：</p><p><code>&lt;a class=&quot;btn&quot; href=&quot;url&quot; title=&quot;title&quot;&gt;text&lt;/a&gt;</code></p><a class="btn" href="https://www.github.com/fy2008"  title="Github" target="_blank">Github</a>]]></content>
    
    
    <categories>
      
      <category>计算机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/28/hello-world/"/>
    <url>/2020/12/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
